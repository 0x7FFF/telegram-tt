{"version":3,"file":"5769.e1f1a2701b11e8f3a1d3.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user.fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    isAuthRememberMe?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  isAuthRememberMe,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode]);\n\n  useHotkeys(isAuthRememberMe ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"char-K\"\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      isAuthRememberMe: global.authRememberMe,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={resizeRef}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      afterChildren={(\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n    >\n      {renderContent}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slide-vertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slide-vertical-fade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  }, [pinnedMessageIds, pinnedMessageId, onFocusPinnedMessage, chatId, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useLayoutEffect, useRef } from '../lib/teact/teact';\n\nconst useLayoutEffectWithPrevDeps = <const T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDepsRef = useRef<T>();\n\n  return useLayoutEffect(() => {\n    const prevDeps = prevDepsRef.current;\n    prevDepsRef.current = dependencies;\n\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nexport const MIN_MEDIA_WIDTH_WITH_COMMENTS = 20 * REM;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 15 * REM;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 20 * REM;\nconst MIN_MEDIA_WIDTH = 7 * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect, useMemo } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  messageId: number,\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  viewportIds?: number[],\n  isResizingContainer?: boolean,\n) {\n  const viewportIndex = useMemo(() => {\n    if (!viewportIds) {\n      return 0;\n    }\n\n    const index = viewportIds.indexOf(messageId);\n    return Math.min(index, viewportIds.length - index - 1);\n  }, [messageId, viewportIds]);\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, viewportIndex,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        forceVideo\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n  selectCurrentMessageIds,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  viewportIds?: number[];\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  viewportIds,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.id, message.chatId, isFocused, focusDirection, noFocusHighlight, viewportIds);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId, messageListType }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const { byId: usersById } = global.users;\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        viewportIds: threadId && messageListType\n          ? selectCurrentMessageIds(global, chatId, threadId, messageListType)\n          : undefined,\n      }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={forcedWidth || photo.dimensions?.width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage, selectCurrentMessageIds,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport {\n  getMinMediaWidth,\n  calculateMediaDimensions,\n  MIN_MEDIA_WIDTH_WITH_COMMENTS,\n  MIN_MEDIA_WIDTH_WITH_TEXT,\n} from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  viewportIds?: number[];\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  viewportIds,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWidthWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, messageId, chatId, isFocused, focusDirection, noFocusHighlight, viewportIds, isResizingContainer,\n  );\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < (isMediaWidthWithCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  } else if (sticker && !hasSubheader) {\n    const { width } = getStickerDimensions(sticker, isMobile);\n    style = `width: ${width + extraPadding}px`;\n    reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderQuickReactionButton() {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        viewportIds: selectCurrentMessageIds(global, chatId, threadId, messageListType),\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useTextLanguage(text?: string) {\n  const [language, setLanguage] = useState<string>();\n\n  useSyncEffect(() => {\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    }\n  }, [text]);\n\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/windowEnvironment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = (\n      threadTopMessageId\n      && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n    )\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' ? ['date', 'id'] : ['id'];\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId, type]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [\n    updateStickyDates, hasTools, getForceNextPinnedInHeader, onPinnedIntersectionChange, type, chatId, threadId,\n  ]);\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => rememberScrollPositionRef.current(),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import type { RefObject } from 'react';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, [setContainerHeight]);\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n        && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/windowEnvironment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE, EDITABLE_INPUT_MODAL_ID,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectReplyingToId,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n  pinnedIds?: number[];\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n  pinnedIds,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\n\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(chatId?: string, threadId?: number, pinnedIds?: number[]) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  }, [\n    chatId, threadId, key, pinnedIds, getLoadingPinnedId, getForceNextPinnedInHeader, setCurrentPinnedIndexes,\n    getCurrentPinnedIndexes, setLoadingPinnedId, setForceNextPinnedInHeader,\n  ]);\n\n  const onFocusPinnedMessage = useCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) return false;\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  }, [\n    chatId, getCurrentPinnedIndexes, getLoadingPinnedId, key, pinnedIds, setCurrentPinnedIndexes,\n    setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition__slide--active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.paddingRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab, initMain,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition__slide--active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, animationLevel, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen, animationLevel, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","_len","arguments","length","_ref","Array","_key","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","forceOnHeavyAnimation","direction","loadViewportMessages","shouldForceRender","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","_ref2","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","prevIsScreenLocked","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","topics","onlineTimeout","prevBlurredTabsCount","addCallback","updateIsOnline","getActions","isLockedUpdated","blurredTabsCount","values","byTabId","isMasterTab","newBlurredTabsCount","getAllMultitabTokens","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","_len2","_ref3","_key2","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","callApi","users","repliesThreadInfos","localMessages","_ref4","isDeleted","_ref5","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingLists","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","sliceSize","from","to","areSomeLocal","areAllLocal","sendMessage","params","_len3","_ref6","_key3","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","getAttachmentType","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","pinnedIds","selectPinnedIds","isPinned","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","originChannelId","selectThreadOriginChat","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","safeReplacePinnedIds","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","currentThreadId","activeThreadId","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","_ref7","threads","updateThread","_ref8","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","isAuthRememberMe","authRememberMe","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","hasArchivedChats","maxFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","afterChildren","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","useLayoutEffectWithPrevDeps","dependencies","debugKey","prevDepsRef","prevDeps","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_COMMENTS","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","SMALL_IMAGE_THRESHOLD","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","viewportIndex","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","quickReactionContainer","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","forceVideo","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","selectCurrentMessageIds","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","hasLinkedChat","linkedChatId","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","setLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","isMediaWidthWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","viewportPinnedIdsToAdd","boundingClientRect","rootBounds","dataset","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","hasScrolled","parentElement","getContainerHeight","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","contentRect","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","prevMessageIds","prevIsViewportNewest","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","MAX_QUICK_IMG_SIZE","MAX_ASPECT_RATIO","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","URL_ENTITIES","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","shouldPreserveInput","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","addExtraClass","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}