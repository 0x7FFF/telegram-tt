{"version":3,"file":"8422.7c5a3460c43b9af4d24d.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiChatFolder, ApiError, ApiChatMember,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type { GlobalActions, GlobalState } from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  TME_WEB_DOMAINS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n  replaceUsers,\n  replaceUserStatuses,\n  replaceChats,\n  replaceChatListIds,\n  addChatMembers,\n  updateUser,\n  addMessages,\n  updateTopics,\n  deleteTopic,\n  updateTopic,\n  updateThreadInfo, updateListedTopicIds,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft, selectThreadTopMessageId,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID, noForumTopicPanel } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.repliesThreadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.repliesThreadInfo.chatId,\n      threadId: chat.lastMessage.repliesThreadInfo.threadId,\n    });\n  }\n\n  if (chat?.isForum && !noForumTopicPanel) {\n    actions.openForumPanel({ chatId: id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat ? getOrderDate(oldestChat) : undefined, shouldReplace, true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateTopic(global, chatId, topicId, { isMuted }));\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, serverTimeOffset,\n  });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  void joinChannel(channelId, accessHash);\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = (idsToAdd as number[])\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats' });\n    return;\n  }\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload) => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    });\n  }\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n    serverTimeOffset: global.serverTimeOffset,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (!startAttach && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({ chatId: chat.id, threadId, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, threadId, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    global = getGlobal();\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  setGlobal(updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  }));\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload) => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  setGlobal(updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  }));\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload) => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    setGlobal(updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    }));\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    setGlobal(updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    }));\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = payload + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithDraft', (global) => {\n  return {\n    ...global,\n    requestedDraft: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  setGlobal(updateChat(global, chat.id, { settings }));\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload) => {\n  const { chatId } = payload;\n  return {\n    ...global,\n    forumPanelChatId: chatId,\n  };\n});\n\naddActionHandler('closeForumPanel', (global) => {\n  return {\n    ...global,\n    forumPanelChatId: undefined,\n  };\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload) => {\n  const { username, filter, startParam } = payload;\n  const bot = await getAttachBotOrNotify(global, username);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    setGlobal({\n      ...global,\n      requestedAttachBotInstall: {\n        botId: bot.id,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            botId: bot.id,\n            filter,\n            startParam,\n          },\n        },\n      },\n    });\n    return;\n  }\n\n  getActions().requestAttachBotInChat({\n    botId: bot.id,\n    filter,\n    startParam,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload) => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload) => {\n  const { chatId, topicId, shouldCloseChatOnError } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if (shouldCloseChatOnError) {\n      actions.openChat({ id: undefined });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload) => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (global.createTopicPanel) {\n    setGlobal({\n      ...global,\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    });\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({ id: chatId, threadId: topicId, shouldReplaceHistory: true });\n  }\n  actions.closeCreateTopicPanel();\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload) => {\n  const { chatId, topicId, ...rest } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (global.editTopicPanel) {\n    setGlobal({\n      ...global,\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    });\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel();\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload) => {\n  const { chatId, topicId, isPinned } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.getTranslation('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  let global = getGlobal();\n  const lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    });\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getActions().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function joinChannel(channelId: string, accessHash: string) {\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nexport async function migrateChat(chat: ApiChat): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n\n    return undefined;\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify(global: GlobalState, username: string) {\n  const chat = await fetchChatByUsername(username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot || !user.isAttachBot) {\n    getActions().showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n\n    return undefined;\n  }\n  return user;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  const global = getGlobal();\n  const currentChat = selectCurrentChat(global);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, username);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      botId: bot.id,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID });\n  }\n\n  const chat = await fetchChatByUsername(username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat();\n      actions.showNotification({ message: 'User does not exist' });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, threadId, messageId: channelPostId });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string, attach: string, startAttach?: string | boolean,\n) {\n  const botChat = await fetchChatByUsername(attach);\n  if (!botChat) return;\n  const botUser = selectUser(getGlobal(), botChat.id);\n  if (!botUser || !botUser.isAttachBot) {\n    actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n    return;\n  }\n\n  actions.callAttachBot({\n    botId: botUser.id,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  let global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { selectChat, selectUser } from '../../selectors';\nimport { getMainUsername } from '../../helpers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((sound) => {\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play().then(() => {\n      sound.pause();\n      sound.volume = 1;\n      sound.currentTime = 0;\n      sound.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  void checkNavigatorUserMediaPermissions(true);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n  void checkNavigatorUserMediaPermissions(isVideo);\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions(isVideo?: boolean) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          getActions().showNotification({\n            message: langProvider.getTranslation('Call.Camera.Error'),\n          });\n        } else {\n          checkMicrophonePermission();\n        }\n      })\n      .catch(() => {\n        getActions().showNotification({\n          message: langProvider.getTranslation('Call.Camera.Error'),\n        });\n      });\n  } else {\n    checkMicrophonePermission();\n  }\n}\n\nfunction checkMicrophonePermission() {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        getActions().showNotification({\n          message: langProvider.getTranslation('RequestAcces.Error.HaveNotAccess.Call'),\n        });\n      }\n    })\n    .catch(() => {\n      getActions().showNotification({\n        message: langProvider.getTranslation('RequestAcces.Error.HaveNotAccess.Call'),\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","currentChat","selectCurrentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","Object","keys","draftsById","forEach","selectDraft","MAIN_THREAD_ID","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","chat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","getActions","loadStickers","stickerSetInfo","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","isAttachBot","showNotification","langProvider","openAttachMenuFromLink","actions","attach","startAttach","botChat","botUser","callAttachBot","botId","startParam","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","payload","noForumTopicPanel","hasUnreadMark","toggleChatUnread","repliesThreadInfo","requestThreadInfoUpdate","isForum","openForumPanel","isChatSummaryOnly","requestChatUpdate","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","chatCreation","progress","ChatCreationProgress","channelId","createChannel","joinChannel","userId","leaveChat","createdChat","e","createGroupChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","folderIds","deleteChatFolder","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","usernames","c","channelPostId","bot","isCurrentChat","startBot","param","usernameChat","threadInfo","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestAttachBotInChat","requestedAttachBotInstall","onConfirm","action","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","draft","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","values","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","sound","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","doPlay","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}