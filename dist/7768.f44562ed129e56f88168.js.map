{"version":3,"file":"7768.f44562ed129e56f88168.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiPollResult, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUnreadMentions,\n  addUsers,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateChats,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds, users, chats,\n      } = result;\n\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n      global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const offsetId = (resultsByType?.[type])?.nextOffsetId;\n  const offsetRate = (resultsByType?.[type])?.nextOffsetRate;\n  const offsetPeerId = (resultsByType?.[type])?.nextOffsetPeerId;\n\n  // Stop loading if we have all the messages\n  if (resultsByType?.[type]?.totalCount && resultsByType[type]!.totalCount! >= resultsByType[type]!.foundIds.length) {\n    return;\n  }\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate,\n    offsetId,\n    offsetPeer,\n    chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  const peerIds = result.users.map(({ id }) => id);\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiChat;\n  chat?: ApiChat;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, chat, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      chat,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery && currentSearch.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    chats, users, messages,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectPeer,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (user.profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (peer.profilePhotos && !shouldInvalidateCache && (isPreload || !peer.profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = peer.profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, users, count, nextOffsetId,\n  } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      users, chats, accountResultIds, globalResultIds,\n    } = result;\n\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive || !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStars, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, appendStarsTransactions, closeInvoice,\n  openStarsTransactionFromReceipt,\n  openStarsTransactionModal,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsBalance,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!result) {\n    return;\n  }\n\n  const { form, invoice } = result;\n\n  global = getGlobal();\n\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updatePayment(global, {\n    inputInvoice: payload,\n    isPaymentModalOpen: form.type === 'regular',\n    isExtendedMedia: (payload as any).isExtendedMedia,\n    status: undefined,\n  }, tabId);\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const theme = extractCurrentThemeParams();\n  const result = await callApi('getPaymentForm', inputInvoice, theme);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users,\n  } = result;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n\n  return { form, invoice };\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n\n  if (inputInvoice.type === 'stars') {\n    actions.requestConfetti({ withStars: true, tabId });\n  }\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const starsPayment = selectTabState(global, tabId).isStarPaymentModalOpen;\n  if (!starsPayment) return;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId) as ApiInputInvoiceStars;\n  const formId = selectPaymentFormId(global, tabId);\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.nativeParams?.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    starsGiftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openPremiumGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const totalBoostUserList = [...boostListResult.users, ...boostListGiftResult.users];\n  global = addUsers(global, buildCollectionByKey(totalBoostUserList, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(status.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(status.users, 'id'));\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n    },\n  };\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { chat, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction && 'emoticon' in reaction && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment, closeInvoice, openStarsTransactionModal, updatePayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const originPayment = selectTabState(global, tabId).starsBalanceModal?.originPayment;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n    ...(originPayment && {\n      starsBalanceModal: undefined,\n    }),\n  }, tabId);\n\n  // Re-open previous payment modal\n  if (originPayment) {\n    global = updatePayment(global, originPayment, tabId);\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { originPayment, tabId = getCurrentTabId() } = payload || {};\n\n  global = clearPayment(global, tabId);\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originPayment,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = updateChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n          profilePhotos: undefined,\n        });\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice, updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice, invoice } = selectTabState(global, tabId).payment;\n\n        if (!areDeepEqual(inputInvoice, update.inputInvoice)) return;\n\n        if (invoice) {\n          const { amount, currency, title } = invoice;\n\n          actions.showNotification({\n            tabId,\n            message: langProvider.oldTranslate('PaymentInfoHint', [\n              formatCurrencyAsString(amount, currency, langProvider.getTranslationFn().code),\n              title,\n            ]),\n          });\n        }\n\n        if (inputInvoice?.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'starsgift') {\n          if (!inputInvoice.userId) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen\n            && areDeepEqual(inputInvoice.userId, starsModalState.forUserId)) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'stars') {\n          if (!inputInvoice.stars) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        setGlobal(global);\n      });\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftModal = useModuleLoader(Bundles.Extra, 'PremiumGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftModal ? <PremiumGiftModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Extra, 'StarsGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  shouldDelayInit?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n};\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  shouldDelayInit,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n        shouldDelayInit={shouldDelayInit}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  getIsMessageListReady: Signal<boolean>;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const isMessageListReady = useDerivedState(getIsMessageListReady);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n            shouldDelayInit={!isMessageListReady}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n            shouldDelayInit={!isMessageListReady}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (!asForwarded && calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        getIsMessageListReady={getIsMessageListReady}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n    && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {shouldRenderForwardAvatar && (\n              <Avatar\n                className=\"forward-avatar\"\n                peer={senderPeer}\n                size=\"micro\"\n              />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            getIsMessageListReady={getIsMessageListReady}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\n\nimport { selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n    >\n      <div\n        className=\"message-content has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAdsClick={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isMonetizationSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    return {\n      message,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onPinnedIntersectionChange,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isRepliesChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/keys/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage) && !isMiddleSearchOpen, undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n      isMiddleSearchOpen,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PremiumGiftModal from '../main/premium/PremiumGiftModal.async';\nimport StarsGiftModal from '../main/premium/StarsGiftModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isPremiumGiftModalOpen?: boolean;\n  isStarsGiftModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isPremiumGiftModalOpen,\n  isStarsGiftModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <PremiumGiftModal isOpen={isPremiumGiftModalOpen} />\n      <StarsGiftModal isOpen={isStarsGiftModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftModal, starsGiftModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isPremiumGiftModalOpen: giftModal?.isOpen,\n      isStarsGiftModalOpen: starsGiftModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'starsBalanceModal' |\n'isStarPaymentModalOpen' |\n'webApp' |\n'starsTransactionModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  webApp: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  isStarPaymentModalOpen: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Extra, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Extra, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Extra, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchSharedMediaMessages,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.voice!)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_TO_BE_DISTRIBUTED } from '../../../util/objects/customPeer';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={!boost.userId ? CUSTOM_PEER_TO_BE_DISTRIBUTED : undefined}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback((e) => {\n    e.preventDefault();\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img\n                        src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                        className={styles.giveawayIcon}\n                        alt={lang('Giveaway')}\n                      />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge,\n                        styles.floatingBadgeButtonColor,\n                        styles.floatingBadgeButton)}\n                      >\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <div className={styles.section}>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </div>\n            )}\n            <div className={styles.section}>\n              {Boolean(boostersToLoadCount) && (\n                <ListItem\n                  key=\"load-more\"\n                  className={styles.showMore}\n                  disabled={boostStatistics?.isLoadingBoosters}\n                  onClick={handleLoadMore}\n                >\n                  {boostStatistics?.isLoadingBoosters ? (\n                    <Spinner className={styles.loadMoreSpinner} />\n                  ) : (\n                    <Icon name=\"down\" className={styles.down} />\n                  )}\n                  {lang('ShowVotes', boostersToLoadCount, 'i')}\n                </ListItem>\n              )}\n            </div>\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { FRAGMENT_ADS_URL } from '../../../config';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  canCollect?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  canCollect,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const hasAvailableBalance = Boolean(statistics?.balances?.availableBalance !== 0);\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ chatId });\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const availableBalance = statistics?.balances?.availableBalance;\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}<span className={styles.decimalPart}>.{decimalTonPart}</span>\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}<span className={styles.decimalUsdPart}>.{decimalUsdPart}</span>\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {hasAvailableBalance && (\n        <div className={styles.section}>\n          {oldLang('lng_channel_earn_balance_title')}\n\n          {renderAvailableReward()}\n\n          <Button size=\"smaller\" type=\"button\" href={FRAGMENT_ADS_URL} disabled={canCollect && hasAvailableBalance}>\n            {oldLang('MonetizationWithdraw')}\n          </Button>\n\n          <div className={styles.textBottom}>{rewardsText}</div>\n        </div>\n      )}\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const canCollect = chat && chat.isCreator;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const statistics = tabState.statistics.monetization;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      canCollect,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingPickerModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingPickerModal ? <PremiumGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingPickerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Extra, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingPickerModal from './premium/PremiumGiftingPickerModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isPremiumGiftingPickerModal?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isPremiumGiftingPickerModal,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingPickerModal && <PremiumGiftingPickerModal isOpen={isPremiumGiftingPickerModal} />}\n      {isStarsGiftingPickerModal && <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      giftingModal,\n      starsGiftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isPremiumGiftingPickerModal: giftingModal?.isOpen,\n      isStarsGiftingPickerModal: starsGiftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateUsers","updateChats","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","offsetRate","nextOffsetRate","offsetPeerId","nextOffsetPeerId","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","hasSearchChanged","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","profilePhotos","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","chatIds","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","appName","startApp","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","getPaymentForm","setInvoiceInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","isStarPaymentModalOpen","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","requestConfetti","withStars","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","starsGiftingModal","transaction","getStarsTransactionFromGift","openStarsTransactionModal","forUserIds","giftModal","forUserId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","totalBoostUserList","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","stars","needsTopupOptions","topupOptions","balance","history","inbound","outbound","appendStarsTransactions","isInbound","isOutbound","updateStarsBalance","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","isSchedule","album","deleteMessageModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","isInvertedMedia","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","originPayment","starsBalanceModal","clearPayment","starsTransactionModal","mediaIndex","isAvatarView","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","reactionPicker","sendAsMessage","isForEffects","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","isNotJoined","updateChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","photoId","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrencyAsString","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","PremiumGiftModal","StarsGiftModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","style","buildStyle","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","REACTION_SIZE","recentReactors","chosenClassName","shouldDelayInit","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","counter","isOutside","metaChildren","noRecentReactors","performMiddleSearch","isMessageListReady","useDerivedState","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","ReactionButton","shouldPlayEffect","withEffect","onStopEffect","openStickerSet","effectRef","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","requestEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","isRound","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","handleEffectClick","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","isRecommended","isRectangular","canReport","onAboutAdsClick","onReportAd","isMonetizationSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isMiddleSearchOpen","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleOpenSearch","event","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","Link","isPrimary","ReactorListModal","MiddleSearch","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isPremiumGiftModalOpen","isStarsGiftModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeader","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","StarsTransactionModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","idPrefix","getMessageMediaThumbDataUri","useMediaTransition","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","selectPeerFullInfo","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","isSavedMessages","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","CUSTOM_PEER_TO_BE_DISTRIBUTED","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","canCollect","monetization","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","hasAvailableBalance","balances","availableBalance","ensureLovelyChart","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","ready","isToncoin","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","FRAGMENT_ADS_URL","textBottom","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingPickerModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isPremiumGiftingPickerModal","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}