{"version":3,"file":"7768.1676e6306aa50941a83b.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/helpers/payments.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getMessageKey, isLocalMessageId } from '../../../util/messageKey';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateChats,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: translate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: translate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const currentUnreadMentions = chat.unreadMentions || [];\n\n  const unreadMentions = currentUnreadMentions.filter((id) => !messageIds.includes(id));\n  const removedCount = currentUnreadMentions.length - unreadMentions.length;\n\n  global = updateChat(global, chat.id, {\n    ...(chat.unreadMentionsCount && {\n      unreadMentionsCount: Math.max(chat.unreadMentionsCount - removedCount, 0) || undefined,\n    }),\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: translate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: translate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: translate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/date/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType, ThreadId } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !threadId || !currentSearch) {\n    return;\n  }\n\n  const { query, results, savedTag } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query && !savedTag) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n    savedTag,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  const hasTagChanged = !isSameReaction(savedTag, currentSearch?.savedTag);\n  if (!currentSearch || query !== currentSearch.query || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateChats,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoice, ApiRequestInputInvoice } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const invoice = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users, botId,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = updatePayment(global, {\n    botName: selectUser(global, botId)?.firstName,\n  }, tabId);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const totalBoostUserList = [...boostListResult.users, ...boostListGiftResult.users];\n  global = addUsers(global, buildCollectionByKey(totalBoostUserList, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByCallback, buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getMessageKey } from '../../../util/messageKey';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey, isSameReaction } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n  updateLocalTextSearchTag,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, '', tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalTextSearchTag', (global, actions, payload): ActionReturnType => {\n  const { tag, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { savedTag } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (!isSameReaction(tag, savedTag)) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, tag, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, undefined, tabId);\n  global = updateLocalTextSearch(global, chatId, threadId, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { translate } from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog, getMessageSummaryText, getSenderTitle, isChatChannel, isJoinedChannelMessage,\n} from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: translate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.translate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.translate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  storyData?: {\n    peerId: string;\n    id: number;\n  };\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document & StoryRepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & StoryRepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiQuickReply,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerColor, buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    message, entities, randomId, recommended, sponsorInfo, additionalInfo, buttonText, canReport, title, url, color,\n  } = mtpMessage;\n\n  let photo: ApiPhoto | undefined;\n  if (mtpMessage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(mtpMessage.photo);\n    photo = buildApiPhoto(mtpMessage.photo);\n  }\n\n  return {\n    randomId: serializeBytes(randomId),\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: recommended,\n    sponsorInfo,\n    additionalInfo,\n    buttonText,\n    canReport,\n    title,\n    url,\n    peerColor: color && buildApiPeerColor(color),\n    photo,\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent' | 'pinned' |\n    'savedPeerId' | 'fromBoostsApplied' | 'quickReplyShortcutId' | 'viaBusinessBotId'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n  const senderBoosts = mtpMessage.fromBoostsApplied;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined<ApiMessage>({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n    senderBoosts,\n    viaBusinessBotId: mtpMessage.viaBusinessBotId?.toString(),\n  });\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      peerId: getApiChatIdFromMtpPeer(replyHeader.peer),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: number;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    amount = action.amount?.toJSNumber();\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: action.cryptoAmount!.toJSNumber(),\n      };\n    }\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else if (action instanceof GramJs.MessageActionBoostApply) {\n    type = 'chatBoost';\n    if (action.boosts === 1) {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsg' : 'BoostingBoostsGroupByUserServiceMsg';\n      translationValues.push('%action_origin%');\n    } else {\n      text = senderId === currentUserId ? 'BoostingBoostsGroupByYouServiceMsgCount'\n        : 'BoostingBoostsGroupByUserServiceMsgCount';\n      translationValues.push(action.boosts.toString());\n      if (senderId !== currentUserId) {\n        translationValues.unshift('%action_origin%');\n      }\n      pluralValue = action.boosts;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n      ...(story && { storyData: story }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      peerId: inputInfo.peerId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nexport function buildApiQuickReply(reply: GramJs.TypeQuickReply): ApiQuickReply {\n  const { shortcutId, shortcut, topMessage } = reply;\n  return {\n    id: shortcutId,\n    shortcut,\n    topMessageId: topMessage,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  deleteChatMessages,\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.loadChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: Math.max(chat.unreadMentionsCount - 1, 0) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        if (inputInvoice && inputInvoice.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftPremiumModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftPremiumModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            setGlobal(global);\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/date/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/date/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelUploadMedia({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/date/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/date/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/date/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/date/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n}> = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  observeIntersection,\n  onClick,\n}) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/messageKey';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    openPremiumModal,\n  } = getActions();\n  const lang = useLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      setLocalTextSearchTag({ tag: reaction });\n      searchTextMessagesLocal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasText = textMessage && hasMessageText(textMessage);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n  const text = textMessage && getMessageContent(textMessage).text;\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const signature = viaBusinessBotTitle || (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            backgroundEmojiId={sender?.color?.backgroundEmojiId}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            onAudioPlay={handleAudioPlay}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {Boolean(senderBoosts) && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\n\nimport { selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n    >\n      <div\n        className=\"message-content has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isRevenueSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    return {\n      message,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/date/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onScrollDownToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n  isContactRequirePremium,\n  areAdsEnabled,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderText(inlineButton.text)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownShown, setIsScrollDownShown] = useState(false);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'webApp'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  webApp: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/date/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Icon from '../common/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, getIsSavedDialog, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, threadId]);\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/date/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/date/dateFormat';\nimport { CUSTOM_PEER_TO_BE_DISTRIBUTED } from '../../../util/objects/customPeer';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.giveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.giveaway\n            ? 'lng_prizes_results_link' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={!boost.userId ? CUSTOM_PEER_TO_BE_DISTRIBUTED : undefined}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.content}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]} alt=\"Giveaway\" />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge,\n                        styles.floatingBadgeButtonColor,\n                        styles.floatingBadgeButton)}\n                      >\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={styles.boostSection}\n              >\n                <Transition\n                  key={activeKey}\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                  className=\"shared-media-transition\"\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem icon=\"gift\" ripple onClick={handleGiveawayClick} className={styles.giveawayButton}>\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingModal ? <PremiumGiftingModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingModal from './premium/PremiumGiftingModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isAppendModalOpen?: boolean;\n  isGiveawayModalOpen?: boolean;\n  isPremiumGiftingModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isPremiumGiftingModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n      loadSavedReactionTags();\n      loadTimezones();\n      loadQuickReplies();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingModalOpen && <PremiumGiftingModal isOpen={isPremiumGiftingModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      giftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isPremiumGiftingModalOpen: giftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","sort","a","b","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","unreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","currentUnreadMentions","removedCount","unreadMentionsCount","markMessagesRead","previousChatId","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateUsers","updateChats","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","savedTag","MESSAGE_SEARCH_SLICE","hasTagChanged","isSameReaction","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","photos","userStatusesById","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","getRequestInputInvoice","inputInvoice","boostChannelId","amount","currency","purpose","boostChannel","additionalChannelIds","untilDate","areWinnersVisible","countries","isOnlyForNewSubscribers","prizeDescription","additionalChannels","requestInfo","saveInfo","selectPaymentInputInvoice","requestInputInvoice","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","updatePayment","botName","getPaymentForm","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","forUserIds","giftPremiumModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","totalBoostUserList","list","boostList","giftedBoosts","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","closeGiftCodeModal","giveawayId","paymentPurpose","openBoostStatistics","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearchTag","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","fetchingStatus","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","filename","fileName","size","audio","shouldSendAsSpoiler","ttlSeconds","quick","height","sizes","dataUri","isSpoiler","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","replyToTopId","replyToPeerId","quoteText","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","loadChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","giftModalState","isCompleted","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","Symbol","toStringTag","iterator","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","DisplayNames","countryCode","isoToEmoji","of","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","Separator","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","REACTION_SIZE","recentReactors","chosenClassName","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","AvatarList","counter","isOutside","metaChildren","noRecentReactors","setLocalTextSearchTag","searchTextMessagesLocal","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","ReactionButton","observeIntersectionForPlaying","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","textMessage","hasText","hasMessageText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","WebPage","onAudioPlay","onCancelMediaTransfer","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","isRecommended","isRectangular","canReport","onAboutAds","onReportAd","isRevenueSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isBot","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","Link","isPrimary","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","hasCurrentTextSearch","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownShown","setIsScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","WebAppModal","CollectibleInfoModal","MapModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","deletingUserId","setDeletingUserId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","CUSTOM_PEER_TO_BE_DISTRIBUTED","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","getMessageMediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isPremiumGiftingModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}