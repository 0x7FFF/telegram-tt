{"version":3,"file":"3779.6126e8d8fc235d0de4e8.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize, getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto || actionPhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  }, [getZoomChange, setZoomChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  }, [getZoomChange, setZoomChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/windowEnvironment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { captureEvents } from '../../util/captureEvents';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen, isForceMobileVersion]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls] = useControlsSignal();\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  }, [clickXThreshold, getControlsVisible, setControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser, selectOutlyingListByMessageId,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  }, [handleClose, mediaIdRef, chatId, isMobile, threadId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === (avatarOwner as ApiUser).fullInfo?.fallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slide-fade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeCloseModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId! });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isStatusPicker,\n  isCurrentUserPremium,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  withDefaultStatusIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickerMarginPx = isMobile ? 8 : 16;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor(width / (itemSize + margin));\n  }, [itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  isStatusPicker?: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isStatusPicker,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith(idPrefix)) {\n        return;\n      }\n\n      const index = Number(id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, defaultStatusIconsId, lang, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, [idPrefix]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            idPrefix={idPrefix}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isStatusPicker={isStatusPicker}\n            shouldHideRecentHeader={withDefaultTopicIcons || isStatusPicker}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n            onContextMenuOpen={onContextMenuOpen}\n            onContextMenuClose={onContextMenuClose}\n            onContextMenuClick={onContextMenuClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../middle/composer/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isStatusPicker\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/windowEnvironment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  isAuthRememberMe?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  isAuthRememberMe,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {isAuthRememberMe && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      isAuthRememberMe: global.authRememberMe,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          {canTranslate && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const fallbackPhoto = currentUser.fullInfo?.fallbackPhoto;\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!currentUser.fullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [currentUser.fullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: fallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, fallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(fallbackPhoto ? 'Privacy.ProfilePhoto.UpdatePublicPhoto' : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {fallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={fallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(fallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto currentUser={currentUser} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/windowEnvironment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/windowEnvironment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  useHorizontalScroll(itemsScrollRef);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY && e.cancelable) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onOpenThread?: VoidFunction;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onTranslate?: () => void;\n  onShowOriginal?: () => void;\n  onSelectLanguage?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n      || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n  isServiceNotificationMessage,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  repliesThreadInfo?: ApiThreadInfo;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const isServiceNotification = isServiceNotificationMessage(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage || !doNotTranslate.includes(detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isServiceNotification && !isScheduled && !isAction && !hasTranslation\n      && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList, selectTabState,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleClick = useCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  }, [handleUserSelect]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n    input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || isAttachmentModal) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat, selectTabState, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n  const personalPhoto = user.fullInfo?.personalPhoto;\n  const notPersonalPhoto = user.fullInfo?.profilePhoto || user.fullInfo?.fallbackPhoto;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const hasLinkedChat = Boolean(chat?.fullInfo?.linkedChatId);\n\n    return { chat, currentUserId: global.currentUserId, hasLinkedChat };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectTabState, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["ANIMATION_DURATION","createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","RADIUS","ITERATIONS","MAX_CACHE_SIZE","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isPlaying","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","isActive","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","clamp","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","animationLevel","onFooterClick","isMoving","isGhostAnimation","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","renderVideoPreview","MediaViewerFooter","alt","useSignalRef","getValue","useEffectOnce","subscribe","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","fullscreenProp","checkIfFullscreen","isMouseDown","setIsMouseDown","getTransform","setTransform","useSignal","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","lockControls","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","name","SenderInfo","fullInfo","fallbackPhoto","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","result","values","reduce","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","_bot$shouldRequestWri","shortName","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","stickerSet","loadAndPlay","idPrefix","favoriteStickers","isSavedMessages","isStatusPicker","isCurrentUserPremium","shouldHideRecentHeader","withDefaultTopicIcon","withDefaultStatusIcon","observeIntersection","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","toggleStickerSet","loadStickers","sharedCanvasRef","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","isIntersecting","useIsIntersecting","stickerMarginPx","emojiMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","margin","calculateItemsPerRow","entry","contentRect","useResizeObserver","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","Set","pill","fluid","grey","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","StickerButton","noAnimate","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","DEFAULT_ID_PREFIX","stickerSetIntersections","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","addedCustomEmojiIds","added","setIds","canAnimate","shouldLoopStickers","defaultTopicIconsId","defaultStatusIconsId","withDefaultTopicIcons","onCustomEmojiSelect","headerRef","activeSetIndex","setActiveSetIndex","pickTruthy","observe","useIntersectionObserver","rootRef","throttleMs","entries","forEach","startsWith","intersectingWithIndexes","observeIntersectionForCovers","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","defaultStatusIconsPack","concat","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","shouldRenderContents","useHorizontalScroll","newLeft","offsetWidth","HEADER_BUTTON_WIDTH","selectStickerSet","stickerSetEl","fastSmoothScroll","handleEmojiSelect","emoji","fullClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","memberIds","seenByUserIds","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","reaction","r","isSameReaction","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","isSlim","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","isAuthRememberMe","authRememberMe","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","query","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","BlockUserModal","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","setDefaultReaction","availableReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","shouldSuggestStickers","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","useEffectWithPrevDeps","prevIsActive","otherLanguages","unselected","partition","newDoNotTranslate","v","filteredDisplayedOptions","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","onTransitionEnd","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","handleWheel","cancelable","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","ReactionSelectorReaction","anchor","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","ReactionSelector","messagesCount","MenuSeparator","Skeleton","inline","withWrap","_ref6","detectedLanguage","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isLocal","isMessageLocal","isServiceNotification","isServiceNotificationMessage","isChatGroup","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","every","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","THRESHOLD","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","VIEWPORT_MARGIN","SCROLL_MARGIN","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","renderHeader","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","newOptions","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","shouldRenderContent","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","withPortal","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","withSharedAnimation","shouldPreloadPreview","observeIntersectionForPlaying","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","personalPhoto","notPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","FLOATING_BUTTON_ANIMATION_TIMEOUT_MS","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","rightIcon","onClickLabel","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","hiddenMembersMinCount","canHideParticipants","areParticipantsHidden","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","DEFAULT_DURATION","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","shippingOption","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName"],"sourceRoot":""}