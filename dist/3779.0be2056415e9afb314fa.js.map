{"version":3,"file":"3779.0be2056415e9afb314fa.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/MediaAreaOverlay.tsx","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/hooks/useLongPress.ts","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/mapModal/MapModal.module.scss?2fca","webpack://telegram-t/./src/components/modals/mapModal/MapModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../util/signals';\nimport { useEffect } from '../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useEffect(() => {\n    return () => {\n      setIsVideoWaiting(false);\n    };\n  }, []);\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useState, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\nimport { animateNumber } from '../../util/animation';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: Function | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered && !isUnsupported, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV, ARE_WEBCODECS_SUPPORTED } from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({ message, forcePlayback: true });\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={sender.id} size=\"medium\" peer={sender} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!]?.id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gJ2Z_EQBnbDYMJ2NKHPj\",\"fullSize\":\"F47ywnKRf0QnMNfkDAhN\",\"backdrop\":\"aZegQFa4eGDydcez2hhX\",\"captionBackdrop\":\"tt0i3c46mBP8eper4sX9\",\"backdropNonInteractive\":\"qBNqjd4Jivn9JZM9LTR1\",\"close\":\"oHmnmRivkoOTtFlipOlm\",\"wrapper\":\"tfRbD6UXCoHpURk9jkFs\",\"slideAnimation\":\"KeE62xWk53FkLDgmLDHC\",\"slideAnimationToActive\":\"u4UY_cga_HGYeSeXtJFy\",\"content\":\"AS2XHnign2xV16Kjj6bL\",\"slideAnimationFromActive\":\"fMXsSVdwtbHbHVPe7TRY\",\"composer\":\"RrR48bdsuf7ziCaT39SR\",\"caption\":\"DfZIQpvbsc1Lopohx81T\",\"storyIndicators\":\"E5huzrUvL4LEC9dx4KwW\",\"slide\":\"Xd5grwcEn6r_RQyYYwTw\",\"slidePreview\":\"fH5dgpor5kv4sjYevuiU\",\"activeSlide\":\"Cs943zlR1iWQhsSG8QUZ\",\"slideInner\":\"UxBW6ApLLCk97qq1YxJH\",\"mediaWrapper\":\"tOO6t_Iv78rQnpDEOgh8\",\"media\":\"IWB6V7TuwMQUqxdPJDKT\",\"name\":\"zX3llen5J3KlIJGrCz2u\",\"forward\":\"mFCpxKAL5_Xa89VkFv5i\",\"storyHeader\":\"Kcahvy487TvQIEvXamQu\",\"sender\":\"E1bHDTXle6dida5Kw_Ob\",\"senderInfo\":\"MtJgsqpsPRYORGENbJDM\",\"senderName\":\"h7HZqUP3UoB_TWRA3ien\",\"storyMetaRow\":\"N9xfCNDRX4SkiLZ4_S9E\",\"storyMeta\":\"_fljB0mSVyj1YctbrtIQ\",\"topIcon\":\"ZSxV9fv0jbSUxkZjI4hF\",\"actions\":\"rlPJs7dRj8mRAAzEoxxg\",\"visibilityButton\":\"L2DlAgxoJ9gNRcSiZRkI\",\"visibilityButtonSelf\":\"uFpWDsHmcfI_qQSfKtph\",\"button\":\"Njk4jy0AOyHD31ABkS6M\",\"buttonMenu\":\"nqQ3MS3rHe4c00GJvtwh\",\"captionGradient\":\"MnckwrDaIp2zIGy011sM\",\"captionInner\":\"jXIvfN5QPnrzWo9eANQf\",\"captionContent\":\"_nAzidGNr0mdSkqyvmj_\",\"hasOverflow\":\"d3FJsMTVC2kORJMGxgbG\",\"expanded\":\"zAH8_B8BrtyxRZR_iHvS\",\"animate\":\"ZguPPKlRJgtkBr7ENcvT\",\"withShowMore\":\"XOq3cloVnzuYbz2bQw_b\",\"captionShowMore\":\"OIcA1buYWPCjn6NzLZJn\",\"navigate\":\"nAa_W_FxKosbXRpB3tgu\",\"prev\":\"zwhGmE8SJA8XAnthasxt\",\"next\":\"a9J5InzXCE1XEX5m3A6J\",\"ownForward\":\"coOmRBCnVtcQ0E5zX96Z\",\"recentViewers\":\"N8tqQ_Z0rKf1tO_Bcg78\",\"recentViewersInteractive\":\"ftzBm5h1HJpZMMU5eWg8\",\"recentViewersAvatars\":\"sgevTC3Q3gTcGD4W1gEG\",\"reactionCount\":\"fJ5u5gkvrTgsVt354fHT\",\"reactionCountHeart\":\"XhkyppmXT3y48487dgF4\",\"modal\":\"RiK8REKD0zdsqi8XRHh5\",\"thumbnail\":\"lFdi4MIeHlnMCtiJbwTA\",\"mediaAreaOverlay\":\"cJhAHhuicOv3OUCyWd1g\",\"mediaArea\":\"CJUu2GmoJLdL5QkCCeOH\",\"ghost\":\"zY4iKmbIIQ3TXtFU3PvS\",\"ghost2\":\"b1yiparcCewkKHh2aOHA\",\"ghostImage\":\"rAlVsvmsoSnnvgZfAsc5\"};","import type { IDimensions } from '../../../global/types';\nimport { StoryViewerOrigin } from '../../../types';\nimport { getUserStoryHtmlId } from '../../../global/helpers';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport fastBlur from '../../../lib/fastBlur';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport styles from '../StoryViewer.module.scss';\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_DESKTOP = 3.5 * REM;\nconst OFFSET_MOBILE = 4 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth;\n    toHeight = windowHeight - OFFSET_MOBILE;\n  }\n\n  const toLeft = isMobile ? 0 : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? 0 : (windowHeight - (toHeight + OFFSET_DESKTOP)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getUserStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyStyles(element: HTMLElement, css: Record<string, string>) {\n  Object.assign(element.style, css);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { hasMessageText, getStoryMediaHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport { ApiMediaFormat } from '../../../api/types';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    mediaAreas,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","import type { IDimensions } from '../../../global/types';\n\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale),\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: roundToNearestEven(BASE_SLIDE_WIDTH * scale),\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n\n// Fractional values cause blurry text. Round to even to keep whole numbers while centering\nfunction roundToNearestEven(value: number) {\n  return Math.round(value / 2) * 2;\n}\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useMemo } from '../../../lib/teact/teact';\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"uXHBlEUDZKJr1u7dvj4k\",\"viewed\":\"GiJXPT0zbAmsx82Nm8ci\",\"active\":\"PaCfy7Nei0tOQAE9i0XV\",\"inner\":\"goBtmBaUzEEUaT_NbrvT\",\"progress\":\"kvGsn6HE3seo_5jfVRs1\",\"paused\":\"J1oS3YeXCbdBhKm3eIBi\"};","import React, {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst OVERFLOW_THRESHOLD_PX = 5.75 * REM;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const showMoreButtonRef = useRef<HTMLDivElement>(null);\n\n  const caption = story.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const { clientHeight } = ref.current;\n    setHasOverflow(clientHeight > OVERFLOW_THRESHOLD_PX);\n  }, [caption]);\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransition(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  useEffect(() => {\n    if (!showMoreButtonRef.current || !contentRef.current) {\n      return;\n    }\n\n    const button = showMoreButtonRef.current;\n    const container = contentRef.current;\n\n    const { offsetWidth } = button;\n    requestMutation(() => {\n      container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n    });\n  }, [canExpand]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    hasOverflow && !isExpanded && styles.hasOverflow,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          <MessageText\n            messageOrStory={story}\n            withTranslucentThumbs\n            forcePlayback\n          />\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMediaArea } from '../../api/types';\nimport type { IDimensions } from '../../global/types';\n\nimport buildStyle from '../../util/buildStyle';\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './StoryViewer.module.scss';\n\ntype OwnProps = {\n  mediaAreas?: ApiMediaArea[];\n  mediaDimensions: IDimensions;\n};\n\nconst MediaAreaOverlay = ({ mediaAreas, mediaDimensions }: OwnProps) => {\n  const { openMapModal } = getActions();\n  const handleMediaAreaClick = (mediaArea: ApiMediaArea) => {\n    if (mediaArea.geo) {\n      openMapModal({ geoPoint: mediaArea.geo });\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.mediaAreaOverlay, styles.media)}\n      style={buildStyle(`aspect-ratio: ${mediaDimensions.width} / ${mediaDimensions.height}`)}\n    >\n      {mediaAreas?.map((mediaArea) => (\n        <div\n          className={styles.mediaArea}\n          style={prepareStyle(mediaArea)}\n          onClick={() => handleMediaAreaClick(mediaArea)}\n        />\n      ))}\n    </div>\n  );\n};\n\nfunction prepareStyle(mediaArea: ApiMediaArea) {\n  const {\n    x, y, width, height, rotation,\n  } = mediaArea.coordinates;\n\n  return buildStyle(\n    `left: ${x}%`,\n    `top: ${y}%`,\n    `width: ${width}%`,\n    `height: ${height}%`,\n    `transform: rotate(${rotation}deg) translate(-50%, -50%)`,\n  );\n}\n\nexport default memo(MediaAreaOverlay);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStealthMode, ApiStory, ApiTypeStory, ApiUser,\n} from '../../api/types';\nimport type { IDimensions } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { formatMediaDuration, formatRelativeTime } from '../../util/dateFormat';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { getServerTime } from '../../util/serverTime';\nimport {\n  selectChat, selectTabState, selectUserStory, selectUserStories, selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport download from '../../util/download';\n\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLongPress from '../../hooks/useLongPress';\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport StoryProgress from './StoryProgress';\nimport Composer from '../common/Composer';\nimport MenuItem from '../ui/MenuItem';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport StoryCaption from './StoryCaption';\nimport AvatarList from '../common/AvatarList';\nimport MediaAreaOverlay from './MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  userId: string;\n  storyId: number;\n  dimensions: IDimensions;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isReportModalOpen?: boolean;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (storyId: number) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  user: ApiUser;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  isSelf: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  areChatSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n}\n\nconst VIDEO_MIN_READY_STATE = 4;\nconst SPACEBAR_CODE = 32;\n\nconst PRIMARY_VIDEO_MIME = 'video/mp4; codecs=hvc1.1.6.L63.00';\nconst SECONDARY_VIDEO_MIME = 'video/mp4; codecs=avc1.64001E';\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  isSelf,\n  userId,\n  storyId,\n  user,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  areChatSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadUserSkippedStories,\n    openForwardMenu,\n    openStoryViewModal,\n    copyStoryLink,\n    toggleStoryPinned,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadChatSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const {\n    isDeletedStory,\n    hasText,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    mediaAreas,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n\n  const isChangelog = userId === storyChangelogUserId;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isSelf && isLoadedStory ? !story.isPinned : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isSelf && isLoadedStory ? story.isPinned : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isSelf && isLoadedStory && (story!.date + viewersExpirePeriod) < getServerTime(),\n  );\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && user?.usernames?.length,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n  const canShareOwn = Boolean(\n    isSelf\n    && isLoadedStory\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const {\n    shouldRender: shouldRenderSkeleton, transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransition(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransition(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransition(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransition(!isSelf && !isChangelog);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransition(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransition(true);\n\n  useStoryPreloader(userId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ userId, storyId });\n    }\n  }, [storyId, userId]);\n\n  useEffect(() => {\n    loadUserSkippedStories({ userId });\n  }, [userId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    if (!isChatExist) {\n      fetchChat({ chatId: userId });\n    }\n  }, [isChatExist, userId]);\n  useEffect(() => {\n    if (isChatExist && !areChatSettingsLoaded) {\n      loadChatSettings({ chatId: userId });\n    }\n  }, [areChatSettingsLoaded, isChatExist, userId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress(handleLongPressStart, handleLongPressEnd);\n\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !isVideo || !fullMediaData);\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => { if (hasAllData && !isUnsupported) handlePlayStory(); }, [hasAllData, isUnsupported]);\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isSelf || isDeletedStory || areViewsExpired) return;\n\n    // Refresh recent viewers list each time\n    loadStoryViews({ storyId, isPreload: true });\n  }, [isDeletedStory, areViewsExpired, isSelf, storyId]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) return;\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      setCurrentTime(video.currentTime);\n    }\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: userId });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    setCurrentTime(0);\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    setCurrentTime(0);\n    openNextStory();\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ userId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryPinned({ storyId, isPinned: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryPinned({ storyId, isPinned: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    setCurrentTime(0);\n    onDelete(story!.id);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: userId, storyId });\n    handlePauseStory();\n  });\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'selectedContacts');\n\n    let message;\n    const myName = getUserFirstOrLastName(user);\n    switch (visibility) {\n      case 'selectedContacts':\n        message = lang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = lang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = lang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: lang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: lang('StealthModeOn'),\n        message: lang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${userId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: lang('StoryNotFound'),\n    });\n  }, [lang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className={isOpen ? 'active' : ''}\n          onClick={onTrigger}\n          ariaLabel={lang('AccDescrOpenMenu2')}\n        >\n          <i className={buildClassName('icon icon-more', styles.topIcon)} aria-hidden />\n        </Button>\n      );\n    };\n  }, [isMobile, lang]);\n\n  function renderStoriesTabs() {\n    const duration = isLoadedStory && story.content.video?.duration\n      ? story.content.video.duration\n      : undefined;\n\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    let privacyIcon = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isSelf) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'selectedContacts':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isSelf && styles.visibilityButtonSelf)}\n        onClick={isSelf ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <i className={`icon icon-${privacyIcon}`} aria-hidden />\n        {isSelf && <i className=\"icon icon-next\" aria-hidden />}\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Avatar\n          peer={user}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderInfo}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getUserFirstOrLastName(user) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativeTime(lang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{lang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={buildClassName(styles.button, styles.buttonVolume)}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={lang('Volume')}\n            >\n              <i\n                className={buildClassName(\n                  'icon',\n                  isMuted || noSound ? 'icon-speaker-muted-story' : 'icon-speaker-story',\n                  styles.topIcon,\n                )}\n                aria-hidden\n              />\n            </Button>\n          )}\n          <DropdownMenu\n            className={buildClassName(styles.button, styles.buttonMenu)}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{lang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>{lang('StorySave')}</MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>{lang('ArchiveStory')}</MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {lang('lng_media_download')}\n              </MenuItem>\n            )}\n            <MenuItem icon=\"eye-closed-outline\" onClick={handleOpenStealthModal}>{lang('StealthMode')}</MenuItem>\n            {!isSelf && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{lang('lng_report_story')}</MenuItem>}\n            {isSelf && <MenuItem icon=\"delete\" destructive onClick={handleDeleteStoryClick}>{lang('Delete')}</MenuItem>}\n          </DropdownMenu>\n        </div>\n      </div>\n    );\n  }\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = story && 'recentViewerIds' in story ? story.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [story]);\n\n  function renderRecentViewers() {\n    const { viewsCount, reactionsCount } = story as ApiStory;\n\n    if (!viewsCount) {\n      return (\n        <div className={buildClassName(styles.recentViewers, appearanceAnimationClassNames)}>\n          {lang('NobodyViewed')}\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={buildClassName(\n          styles.recentViewers,\n          styles.recentViewersInteractive,\n          appearanceAnimationClassNames,\n        )}\n        onClick={handleOpenStoryViewModal}\n      >\n        {!areViewsExpired && Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.recentViewersAvatars}\n          />\n        )}\n\n        <span>{lang('Views', viewsCount, 'i')}</span>\n        {Boolean(reactionsCount) && (\n          <span className={styles.reactionCount}>\n            <i className={buildClassName(styles.reactionCountHeart, 'icon icon-heart')} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img src={previewBlobUrl} alt=\"\" className={buildClassName(styles.media, previewTransitionClassNames)} />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPlaying={markStoryPlaying}\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n            onEnded={handleOpenNextStory}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={lang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={lang('Next')}\n            />\n          </>\n        )}\n        <MediaAreaOverlay mediaAreas={mediaAreas} mediaDimensions={dimensions} />\n      </div>\n\n      {isSelf && renderRecentViewers()}\n      {canShareOwn && (\n        <Button\n          className={styles.ownForward}\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n        >\n          <i className=\"icon icon-forward\" aria-hidden />\n        </Button>\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={lang('Close')}\n        />\n      )}\n      {hasText && <div className={styles.captionGradient} />}\n      {hasText && (\n        <StoryCaption\n          key={`caption-${storyId}-${userId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={appearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={userId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isSelf}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={lang('ReplyPrivately')}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  userId, storyId, isPrivateStories, isArchivedStories, isReportModalOpen, isDeleteModalOpen,\n}): StateProps => {\n  const { currentUserId, appConfig } = global;\n  const user = global.users.byId[userId];\n  const chat = selectChat(global, userId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const { orderedIds, pinnedIds, archiveIds } = selectUserStories(global, userId) || {};\n  const story = selectUserStory(global, userId, storyId);\n  const shouldForcePause = Boolean(\n    viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || isReportModalOpen || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal,\n  );\n\n  return {\n    user,\n    story,\n    orderedIds: isArchivedStories ? archiveIds : (isPrivateStories ? pinnedIds : orderedIds),\n    isMuted,\n    isSelf: currentUserId === userId,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    areChatSettingsLoaded: Boolean(chat?.settings),\n    stealthMode: global.stories.stealthMode,\n  };\n})(Story));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst DEFAULT_THRESHOLD = 250;\n\nfunction useLongPress(\n  onStart: NoneToVoidFunction,\n  onEnd: NoneToVoidFunction,\n) {\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timerId = useRef<number | undefined>(undefined);\n\n  const start = useCallback((e: React.MouseEvent | React.TouchEvent) => {\n    const canProcessEvent = ('button' in e && e.button === 0) || ('touches' in e && e.touches.length > 0);\n    if (isPressed.current || !canProcessEvent) {\n      return;\n    }\n\n    isPressed.current = true;\n    timerId.current = window.setTimeout(() => {\n      onStart();\n      isLongPressActive.current = true;\n    }, DEFAULT_THRESHOLD);\n  }, [onStart]);\n\n  const cancel = useCallback(() => {\n    if (isLongPressActive.current) {\n      onEnd();\n    }\n\n    isLongPressActive.current = false;\n    isPressed.current = false;\n    window.clearTimeout(timerId.current);\n  }, [onEnd]);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(timerId.current);\n    };\n  }, []);\n\n  return {\n    onMouseDown: start,\n    onMouseUp: cancel,\n    onMouseLeave: cancel,\n    onTouchStart: start,\n    onTouchEnd: cancel,\n  };\n}\n\nexport default useLongPress;\n","import React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory, ApiUser, ApiUserStories } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../global/helpers';\nimport useMedia from '../../hooks/useMedia';\n\nimport Avatar from '../common/Avatar';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  user?: ApiUser;\n  userStories?: ApiUserStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n}\n\nfunction StoryPreview({\n  user, userStories, lastViewedId, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadUserSkippedStories } = getActions();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!userStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = userStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1);\n    const resultId = byId[previewIndexId]?.id || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, userStories]);\n\n  useEffect(() => {\n    if (story && !('content' in story)) {\n      loadUserSkippedStories({ userId: story.userId });\n    }\n  }, [story]);\n\n  const video = story && 'content' in story ? story.content.video : undefined;\n  const imageHash = story && 'content' in story\n    ? getStoryMediaHash(story)\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!user || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ userId: story.userId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n\n      <div className={styles.content}>\n        <Avatar\n          peer={user}\n          withStory\n          storyViewerMode=\"disabled\"\n        />\n        <div className={styles.name}>{renderText(getUserFirstOrLastName(user) || '')}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { user }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByUserIds,\n      origin,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: user?.id ? lastViewedByUserIds?.[user.id] : undefined,\n    origin,\n  };\n})(StoryPreview));\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiUserStories } from '../../api/types';\n\nimport { IS_FIREFOX, IS_SAFARI } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { selectIsStoryViewerOpen, selectTabState, selectUser } from '../../global/selectors';\nimport { calculateOffsetX } from './helpers/dimensions';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useSignal from '../../hooks/useSignal';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isReportModalOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (storyId: number) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  userIds: string[];\n  currentUserId?: string;\n  currentStoryId?: number;\n  byUserId?: Record<string, ApiUserStories>;\n  isSingleUser?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ANIMATION_DURATION_MS = 350 + (IS_SAFARI || IS_FIREFOX ? ANIMATION_END_DELAY : 20);\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst FROM_ACTIVE_SCALE_VALUE = 0.333;\nconst ANIMATION_TO_ACTIVE_SCALE = '3';\nconst ANIMATION_FROM_ACTIVE_SCALE = `${FROM_ACTIVE_SCALE_VALUE}`;\n\nfunction StorySlides({\n  userIds,\n  currentUserId,\n  currentStoryId,\n  isOpen,\n  isSingleUser,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byUserId,\n  isReportModalOpen,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const [renderingUserId, setRenderingUserId] = useState(currentUserId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevUserId = usePrevious(currentUserId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSingleUser = useCurrentOrPrev(isSingleUser, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement | null }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | null, userId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[userId]) {\n      rendersRef.current[userId] = { current: ref };\n    } else {\n      rendersRef.current[userId].current = ref;\n    }\n  }\n\n  const renderingUserIds = useMemo(() => {\n    if (renderingUserId && (renderingIsSingleUser || renderingIsSingleStory)) {\n      return [renderingUserId];\n    }\n\n    const index = renderingUserId ? userIds.indexOf(renderingUserId) : -1;\n    if (!renderingUserId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, userIds.length);\n\n    return userIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSingleUser, renderingUserId, userIds]);\n\n  const renderingUserPosition = useMemo(() => {\n    if (!renderingUserIds.length || !renderingUserId) {\n      return -1;\n    }\n\n    return renderingUserIds.indexOf(renderingUserId);\n  }, [renderingUserId, renderingUserIds]);\n\n  const currentUserPosition = useMemo(() => {\n    if (!renderingUserIds.length || !currentUserId) {\n      return -1;\n    }\n    return renderingUserIds.indexOf(currentUserId);\n  }, [currentUserId, renderingUserIds]);\n\n  useEffect(() => {\n    const timeoutId = window.setTimeout(() => {\n      setRenderingUserId(currentUserId);\n    }, ANIMATION_DURATION_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [currentUserId]);\n\n  useEffect(() => {\n    let timeOutId: number | undefined;\n\n    if (renderingUserId !== currentUserId) {\n      timeOutId = window.setTimeout(() => {\n        setRenderingStoryId(currentStoryId);\n      }, ANIMATION_DURATION_MS);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n\n    return () => {\n      window.clearTimeout(timeOutId);\n    };\n  }, [renderingUserId, currentStoryId, currentUserId, renderingStoryId]);\n\n  useEffect(() => {\n    let timeOutId: number | undefined;\n\n    if (prevUserId && prevUserId !== currentUserId) {\n      setIsAnimating(true);\n      timeOutId = window.setTimeout(() => {\n        setIsAnimating(false);\n      }, ANIMATION_DURATION_MS);\n    }\n\n    return () => {\n      setIsAnimating(false);\n      window.clearTimeout(timeOutId);\n    };\n  }, [prevUserId, currentUserId, setIsAnimating]);\n\n  const slideAmount = currentUserPosition - renderingUserPosition;\n  const isBackward = renderingUserPosition > currentUserPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return userIds.reduce<Record<string, number>>((transformX, userId, index) => {\n      if (userId === renderingUserId) {\n        transformX[userId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && userIds[index - 1] === renderingUserId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < userIds.length - 1 && userIds[index + 1] === renderingUserId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[userId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentUserId === userId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useLayoutEffect(() => {\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([userId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n\n        return;\n      }\n\n      const scale = currentUserId === userId\n        ? ANIMATION_TO_ACTIVE_SCALE\n        : userId === renderingUserId ? ANIMATION_FROM_ACTIVE_SCALE : '1';\n\n      let offsetY = 0;\n      if (userId === renderingUserId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * FROM_ACTIVE_SCALE_VALUE;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (userId === currentUserId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[userId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', scale);\n    });\n  }, [currentUserId, getIsAnimating, renderingUserId]);\n\n  function renderStoryPreview(userId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={userId}\n        ref={(ref) => setRef(ref, userId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          user={selectUser(getGlobal(), userId)}\n          userStories={byUserId?.[userId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(userId: string) {\n    const style = buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={userId}\n        ref={(ref) => setRef(ref, userId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          userId={userId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isReportModalOpen={isReportModalOpen}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrapper} style={`--story-viewer-scale: ${slideSizes.scale}`}>\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingUserIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingUserIds.map((userId, index) => {\n        if (userId === renderingUserId) {\n          return renderStory(renderingUserId);\n        }\n\n        return renderStoryPreview(userId, index, index - renderingUserPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      userId: currentUserId, storyId: currentStoryId, isSingleUser, isSingleStory, isPrivate, isArchive,\n    },\n  } = selectTabState(global);\n  const { byUserId, orderedUserIds: { archived, active } } = global.stories;\n  const user = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    byUserId,\n    userIds: user?.areStoriesHidden ? archived : active,\n    currentUserId,\n    currentStoryId,\n    isSingleUser,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  storyId?: number;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({ isOpen, storyId, onClose }: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!storyId) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ storyId });\n    onClose();\n  }, [onClose, storyId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"hOwWWII6h241MvvB87N5\",\"viewsList\":\"hOwWWII6h241MvvB87N5\",\"views-list-loading\":\"ZaMMMcb_gGs7nmClMvzj\",\"viewsListLoading\":\"ZaMMMcb_gGs7nmClMvzj\",\"info\":\"Yt7QHLaCNE1N3OSWXa_n\",\"centeredInfo\":\"vKqMQNiuvK152lO__j16\",\"view-reaction\":\"x77ctFpUWd2rG2IUxz7y\",\"viewReaction\":\"x77ctFpUWd2rG2IUxz7y\",\"header\":\"oGYCTCHvXEkdIBMd0dHh\",\"content\":\"NfqCS7dx9c9nxYXZc3p2\",\"top-button\":\"hMKJ4bqsyGw0fQn5RwVQ\",\"topButton\":\"hMKJ4bqsyGw0fQn5RwVQ\",\"contact-filter\":\"RnVt9sK0OgnrHADARI9k\",\"contactFilter\":\"RnVt9sK0OgnrHADARI9k\",\"selected\":\"deHea5ii46_J57LhYmaj\",\"sort\":\"Mq_j5_FRMS06qJcPCwmC\",\"sort-button\":\"BYQ1X4iADCMrIUqdd3Lt\",\"sortButton\":\"BYQ1X4iADCMrIUqdd3Lt\",\"icon-sort\":\"yq5P30VXV4gSKmSHmXLL\",\"iconSort\":\"yq5P30VXV4gSKmSHmXLL\",\"icon-down\":\"mjcXdhEuASJWWO5Cqlxq\",\"iconDown\":\"mjcXdhEuASJWWO5Cqlxq\",\"search\":\"vs1AYj85WQxzI646EBZt\",\"bottom-info\":\"sWTOVQoWoeNAu2G8kVOl\",\"bottomInfo\":\"sWTOVQoWoeNAu2G8kVOl\",\"scrolled\":\"knxco2DJ3lthvQo2SOG6\",\"footer\":\"RqsPFLpLbJYFm50JYSiw\",\"close\":\"pONeLHkbjIjtqQT59wyh\",\"opacity-fade-in\":\"h15igx036PH4epiXwUBg\",\"opacityFadeIn\":\"h15igx036PH4epiXwUBg\",\"fadeIn\":\"T9DzW6zCmxNgXv1YaUji\",\"blocked\":\"EVxErnsRszao77tgwSaA\",\"check\":\"HbQucamQwAYpvNnTqHVM\",\"menuBubble\":\"Y3KJ1StmiJpvbpeqbMuv\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiStoryView, ApiUser } from '../../api/types';\n\nimport { selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiStoryView;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\nconst StoryView = ({\n  storyView,\n  user,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat, closeStoryViewer, unblockUser, blockUser, deleteContact, updateStoryView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    closeStoryViewer();\n\n    setTimeout(() => {\n      openChat({ id: storyView.userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    const { userId, areStoriesBlocked, isUserBlocked } = storyView;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId, isOnlyStories: true });\n            updateStoryView({ userId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId, isOnlyStories: true });\n            updateStoryView({ userId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId });\n            updateStoryView({ userId, isUserBlocked: false });\n          } else {\n            blockUser({ userId });\n            updateStoryView({ userId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, user]);\n\n  return (\n    <ListItem\n      key={storyView.userId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => handleClick()}\n      rightElement={storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      <PrivateChatInfo\n        userId={storyView.userId}\n        noStatusOrTyping\n        status={formatDateAtTime(lang, storyView.date * 1000)}\n        statusIcon=\"icon-message-read\"\n        withStory\n        forceShowSelf\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const user = selectUser(global, storyView.userId);\n\n  return {\n    user,\n    availableReactions: global.availableReactions,\n  };\n})(StoryView));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiStory, ApiStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectUserStory,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport SearchInput from '../ui/SearchInput';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  viewsById?: Record<string, ApiStoryView>;\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  viewsById,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViews, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story!.date + viewersExpirePeriod) < getServerTime();\n  const viewsCount = story?.viewsCount || 0;\n  const reactionsCount = story?.reactionsCount || 0;\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViewIds = useMemo(() => {\n    if (!viewsById) {\n      return undefined;\n    }\n\n    return Object.values(viewsById)\n      .sort(prepareComparator(areReactionsFirst))\n      .map((view) => view.userId);\n  }, [areReactionsFirst, viewsById]);\n\n  const placeholderCount = !sortedViewIds?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViewIds?.length) && sortedViewIds!.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViews({\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <i className={buildClassName(\n          'icon',\n          areReactionsFirst ? 'icon-heart-outline' : 'icon-recent',\n          styles.iconSort,\n        )}\n        />\n        <i className={buildClassName('icon icon-down', styles.iconDown)} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViewIds?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViewIds?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViewIds}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViewIds?.map((id) => (\n            <StoryView key={id} storyView={viewsById![id]} />\n          ))}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n              // eslint-disable-next-line react/no-array-index-key\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiStoryView, b: ApiStoryView) => {\n    if (areReactionsFirst) {\n      if (a.reaction && !b.reaction) {\n        return -1;\n      }\n      if (!a.reaction && b.reaction) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, viewsById, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectUserStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    viewsById,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"wU1uWdwnVeSGSB5gOjJ6\",\"active\":\"SlrHi8_ck8rgqhL48EhA\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterUsersByName([...closeFriendIds, ...contactIds], usersById, searchQuery));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery, usersById]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","import React, { memo, useMemo, useState } from '../../../lib/teact/teact';\nimport Picker from '../../common/Picker';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName } from '../../../global/helpers';\nimport type { ApiUser } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  usersById: Record<string, ApiUser>;\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  usersById,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterUsersByName([...selectedIds || [], ...contactIds], usersById, searchQuery));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds, usersById]);\n\n  return (\n    <Picker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"Tc2kIulYTlFPvwfiTsFu\",\"header\":\"JXAfpcoB9izWjIX_WP0Q\",\"closeButton\":\"Hku60UdVn3LASgJdRQuw\",\"headerTitle\":\"L0Y7Snis7FiIcjMWZBBV\",\"content\":\"TBDaWd1Xw_wRqKUfj6IE\",\"section\":\"aNUFlXJVOpJVBLust1Ow\",\"title\":\"zNuDMViBzMNzGZxwFYGt\",\"list\":\"uW2YeebP6I62I5STt6az\",\"option\":\"CmouOddJNYo5qMb1eDhZ\",\"checked\":\"PxjIam8OpB7IAvp7fByQ\",\"input\":\"K9FImlb6XOJreshP5cfK\",\"icon\":\"Wpl9IXFnTYZf8HWj8H7_\",\"action\":\"oOUd_PRdTkIxpN_BekC1\",\"optionContent\":\"BkziTDKbvbzgii4mPbsx\",\"footer\":\"gH3hgLj6tnN_xhycOx0Q\",\"info\":\"i2HOS8g2UGDP69ABnvAe\",\"submit\":\"XwAIvijHgerStkRxm6rt\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiUser } from '../../api/types';\nimport type { ApiPrivacySettings, PrivacyVisibility } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectTabState, selectUserStory } from '../../global/selectors';\nimport { getUserFullName } from '../../global/helpers';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport CloseFriends from './privacy/CloseFriends';\nimport AllowDenyList from './privacy/AllowDenyList';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: string;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'selectedContacts',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryPinned } = getActions();\n\n  const lang = useLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isPinned);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isPinned !== isPinned) {\n      toggleStoryPinned({ storyId: story!.id, isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getUserFullName(usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? convertSecondsToHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <i className={`icon icon-${option.icon}`} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <i className=\"icon icon-next\" aria-hidden />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, userId,\n    },\n  } = selectTabState(global);\n  const story = (userId && storyId)\n    ? selectUserStory(global, userId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story as ApiStory : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n\nfunction convertSecondsToHours(seconds: number): number {\n  const secondsInHour = 3600;\n  const minutesInHour = 60;\n\n  const hours = Math.floor(seconds / secondsInHour);\n  const remainingSeconds = seconds % secondsInHour;\n  const remainingMinutes = Math.floor(remainingSeconds / minutesInHour);\n\n  // If remaining minutes are greater than or equal to 30, round up the hours\n  return remainingMinutes >= 30 ? hours + 1 : hours;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GNraau1Tus9Dhh2t0acA\",\"close\":\"m12ugKt9ihAO1ej1_y9n\",\"stealthIcon\":\"VLiBdviejkHCeGYNuGbe\",\"title\":\"uEr8ArVuYRUD3Ca3K1Sr\",\"description\":\"uV7xfk10UeLETmkHjCSv\",\"listItem\":\"P7J78AMcEBuYTdRnkNpv\",\"icon\":\"cFpiujXxzIbtMShso6wr\",\"button\":\"z5JVVwDZqJmujLRuZYiL\",\"subtitle\":\"ADx8YQgxcFasnFZ14Tcy\"};","import React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium } : StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.close}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <i className=\"icon icon-eye-closed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-past', styles.icon)} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-future', styles.icon)} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport {\n  selectIsStoryViewerOpen,\n  selectTabState,\n  selectUserStory,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateOpening, animateClosing } from './helpers/ghostAnimation';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_END_DELAY } from '../../config';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useStoryProps from './hooks/useStoryProps';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport ShowTransition from '../ui/ShowTransition';\nimport Button from '../ui/Button';\nimport StorySlides from './StorySlides';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StoryViewModal from './StoryViewModal';\nimport ReportModal from '../common/ReportModal';\nimport StorySettings from './StorySettings';\nimport StealthModeModal from './StealthModeModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  userId?: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  userId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor } = getActions();\n\n  const lang = useLang();\n  const [idStoryForDelete, setIdStoryForDelete] = useState<number | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePrevious(isOpen);\n  const prevBestImageData = usePrevious(bestImageData);\n  const prevUserId = usePrevious(userId);\n  const prevOrigin = usePrevious(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setIdStoryForDelete(undefined);\n      closeReportModal();\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useCallback((id: number) => {\n    setIdStoryForDelete(id);\n    openDeleteModal();\n  }, []);\n\n  const handleCloseDeleteModal = useCallback(() => {\n    closeDeleteModal();\n    setIdStoryForDelete(undefined);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && userId && thumbnail && origin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(userId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevUserId && prevBestImageData && prevOrigin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevUserId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    userId,\n    prevUserId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className={buildClassName('icon icon-close', styles.topIcon)} aria-hidden />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isReportModalOpen={isReportModalOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openReportModal}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        storyId={idStoryForDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        subject=\"story\"\n        userId={userId}\n        storyId={storyId}\n      />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, userId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = userId && storyId ? selectUserStory(global, userId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    userId,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport { getChatTitle, getUserFirstOrLastName, isUserId } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\nimport usePrevious from '../../hooks/usePrevious';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingIsStory = usePrevious(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, isManyMessages, isStory, lang]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title, duration,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          duration={duration}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Jf25l9kEg1BT3lEkmCMw\",\"buttons\":\"hyS121xg9ZCtcPNQjDYN\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiGeoPoint } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  geoPoint?: ApiGeoPoint;\n  zoom?: number;\n};\n\nconst OpenMapModal = ({ geoPoint, zoom }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          Open Street Maps\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUserName?: string;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUserName,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, currentUserName]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\",\"font-icon\":\"r6_o8xZKIo11QFFYm2Hv\",\"fontIcon\":\"r6_o8xZKIo11QFFYm2Hv\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  isFontIcon?: boolean;\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  onClick?: VoidFunction;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  onClick,\n}) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <i\n          className={buildClassName(styles.fontIcon, `icon icon-${icon}`)}\n          aria-hidden\n          style={`--item-color: rgb(${r},${g},${b})`}\n        />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","import React, { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\n\nimport { selectUser } from '../../../../global/selectors';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { DPR } from '../../../../util/windowEnvironment';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLang from '../../../../hooks/useLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\n\nimport Avatar from '../../../common/Avatar';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-closed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = 5.25 * DPR * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n    });\n  }, []);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE / DPR;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dfgGrPUU6AC7NazJh8Ut\",\"header\":\"Y9bbyTXeZIKzoa8wtnkn\",\"circle\":\"eTSbeIbZl_YRbAPcqHhQ\",\"title\":\"me5CfUvQ6RleMxtFjIaR\",\"features\":\"ssjliTyWlTUXFLdz5NJd\",\"mobile\":\"ckFVT8AXlwgCejTXWdfQ\",\"scrolled\":\"T0nWA26c2Q0j0Z_PpexK\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"stories\":\"uOZMPO0FyBVTsM6ACXDw\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'stories',\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'infinite_reactions',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"status-emoji\":\"ZDQ58Gu2MpISHIigNnCf\",\"statusEmoji\":\"ZDQ58Gu2MpISHIigNnCf\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\",\"stickerSetText\":\"CCRIHzjKzzj6y3nYJQKk\",\"stickerSetLink\":\"_G_ogp7ec2JUxZUhoaAi\",\"stickerSetLinkIcon\":\"vJ2GKZFltN22CJDw5Bdu\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiPremiumPromo, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  selectTabState, selectIsCurrentUserPremium, selectUser, selectStickerSet,\n} from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  const handleClick = useLastCallback(() => {\n    handleClickWithStartParam();\n  });\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const stickerSetTitle = useMemo(() => {\n    if (!fromUserStatusSet || !fromUser) return undefined;\n\n    const template = lang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n    const [first, second] = template.split('{link}');\n\n    const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n      <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n    ) : undefined;\n    const link = (\n      <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n        {emoji}{renderText(fromUserStatusSet.title)}\n      </span>\n    );\n    return [renderText(first), link, renderText(second)];\n  }, [fromUser, fromUserStatusSet, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return lang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            {fromUserStatusEmoji ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {fromUserStatusSet ? stickerSetTitle : renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          peer={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getServerTimeOffset } from '../../util/serverTime';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\n\nimport StickerView from './StickerView';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, !hasCustomColor);\n\n  const {\n    id, isCustomEmoji, hasEffect: isPremium, stickerSetInfo,\n  } = sticker;\n  const isLocked = !isCurrentUserPremium && isPremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuPosition);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n\n  const getLayout = () => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true });\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      openPremiumModal({ initialSection: 'premium_stickers' });\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: sticker,\n      expires: Date.now() / 1000 + duration + getServerTimeOffset(),\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <i className=\"icon icon-lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <i className=\"icon icon-premium\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isPopular\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, thumbCustomEmojiId, isLottie, isVideos: isVideo,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './ReactorListModal.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"icon-message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"syvgWO0b6lIEPd3iu1TA\",\"list-item\":\"_nKqEo7SgYwpaclSSCIx\",\"listItem\":\"_nKqEo7SgYwpaclSSCIx\",\"title\":\"R7LNh8TMqiktRuTuESsf\",\"subtitle\":\"so4259O2hcdGOxENXdqc\",\"languages\":\"DiSTH_4CZnPK8Dh8Tpfq\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"large\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  localContactIds,\n  localChatIds,\n  localUserIds,\n  globalChatIds,\n  globalUserIds,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState, TabState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n    };\n  };\n}\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { LoadMoreDirection } from '../../../types';\nimport type { StateProps } from './helpers/createMapStateToProps';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\nimport type { StateProps } from './helpers/createMapStateToProps';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadProfilePhotos({ profileId: currentUserId });\n    }\n  }, [currentUserId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    loadAuthorizations();\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUserId && (\n          <ProfileInfo\n            userId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll fab-padding-bottom\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useLastCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleCopyPrimaryClicked = useLastCallback(() => {\n    if (isDisabled) return;\n    copyLink(inviteLink);\n  });\n\n  const handleShare = useLastCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  });\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked} disabled={isDisabled}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={!url ? lang('Loading') : url}\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/windowEnvironment';\nimport { getSystemTheme } from '../../../util/systemTheme';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport {\n  playNotifySound,\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n} from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  canSetPasscode,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedUsers();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, []);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n    openPremiumModal,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  });\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUserId: string;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\",\"subtitle\":\"t3PK9_nPdL12eMsiMNcM\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { getActions, withGlobal } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n      shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,\n      shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n      shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          onSettingsScreenSelect={onSettingsScreenSelect}\n          onLeftColumnContentChange={onLeftColumnContentChange}\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  canCopy?: boolean,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = canCopy && photo && (mediaHash || hasMessageLocalBlobUrl(message))\n    && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (canCopy && href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (canCopy && text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            { message, shouldRenderAsHtml: true },\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport ReactionSelector from './ReactionSelector';\nimport AvatarList from '../../common/AvatarList';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: (ApiChat | ApiUser)[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message,\n      targetHref,\n      canCopy,\n      handleAfterCopy,\n      canCopyLink ? onCopyLink : undefined,\n      onCopyMessages,\n      onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenMessageReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageReactionPicker}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n              <span className=\"MessageContextMenu--seen-by-label\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {canShowReactionsCount && message.reactors?.count ? (\n                  canShowSeenBy && seenByDatesCount\n                    ? lang(\n                      'Chat.OutgoingContextMixedReactionCount',\n                      [message.reactors.count, seenByDatesCount],\n                    )\n                    : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                ) : (\n                  seenByDatesCount === 1 && seenByRecentPeers\n                    ? renderText(\n                      isUserId(seenByRecentPeers[0].id)\n                        ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                        : (seenByRecentPeers[0] as ApiChat).title,\n                    ) : (\n                      seenByDatesCount\n                        ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                        : lang('Conversation.ContextMenuNoViews')\n                    )\n                )}\n              </span>\n            </span>\n            <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectCanTranslateMessage,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedMessageTranslationLanguage,\n  selectStickerSet,\n  selectRequestedChatTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n} from '../../../global/helpers';\nimport { PREVIEW_AVATAR_COUNT, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n  isReactionPickerOpen,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openMessageReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, PREVIEW_AVATAR_COUNT);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, PREVIEW_AVATAR_COUNT)\n      .map((id) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openMessageReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n  selectCanManage, selectIsRightColumnShown, selectCanTranslateChat,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    toggleManagement,\n    togglePeerTranslations,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    toggleManagement({ force: true });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {lang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {lang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGiftPremium = Boolean(\n      userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji, ApiStory, ApiStorySkipped,\n  ApiMessageEntity,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectIsCurrentUserPremium,\n  selectTabState, selectUserStory,\n} from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { buildCustomEmojiHtml } from '../composer/helpers/customEmoji';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  withCustomReactions,\n  sendAsMessage,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryUserId = useCurrentOrPrev(story?.userId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryUserId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReaction | ApiSticker) => {\n    const reaction = 'id' in item ? { documentId: item.id } : item;\n\n    const sticker = 'documentId' in item\n      ? getGlobal().customEmojis.byId[item.documentId] : 'emoticon' in item ? undefined : item;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        userId: renderedStoryUserId!, storyId: renderedStoryId!, reaction, shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('emoticon' in item) {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseMessageInput(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !withCustomReactions && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !(withCustomReactions || renderedStoryId)}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions && !renderedStoryId ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n        onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const {\n    chatId, messageId, storyUserId, storyId, position, sendAsMessage,\n  } = state.reactionPicker || {};\n  const story = storyUserId && storyId\n    ? selectUserStory(global, storyUserId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : Boolean(storyUserId);\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    story,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"storyMenu\":\"nwZabdh1rB72Eb1x64Og\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: shouldSuggestCompression === undefined ? isSendingCompressed : undefined,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_ELECTRON, PRODUCTION_URL } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_ELECTRON ? PRODUCTION_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  const lang = useLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSelect = useLastCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  });\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {canSchedule && onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const global = getGlobal();\n\n      let senderPeer = message.senderId\n        ? selectUser(global, message.senderId) || selectChat(global, message.senderId)\n        : undefined;\n\n      if (!senderPeer && message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        const originalSender = isChannelPost && fromChatId ? selectChat(global, fromChatId) : undefined;\n        if (originalSender) senderPeer = originalSender;\n      }\n\n      if (!senderPeer) {\n        return undefined;\n      }\n\n      return {\n        message,\n        senderPeer: senderPeer!,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderPeer, onClick,\n  }: {\n    message: ApiMessage;\n    senderPeer: ApiUser | ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          peer={senderPeer}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={senderPeer} withEmojiStatus />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const messagesById = selectChatMessages(global, chatId);\n    if (!messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../global/helpers';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiChat } from '../../api/types';\n\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"general\":\"CSjgq5gkTxM3iZQ9oJ9b\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePrevious(step, true);\n  const prevRequestId = usePrevious(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","cancelAnimation","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","content","action","renderMessageText","forcePlayback","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","timing","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","peer","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","user","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","OFFSET_DESKTOP","OFFSET_MOBILE","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getUserStoryHtmlId","StoryViewerOrigin","storyRibbonStyles","css","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","mediaAreas","canDownload","noForwards","downloadHash","downloadMediaData","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlide","slide","calculateSlideSizes","DEFAULT_STORY_DURATION_S","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","OVERFLOW_THRESHOLD_PX","isExpanded","onExpand","onFold","contentRef","showMoreButtonRef","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","button","offsetWidth","setProperty","scrollTo","fullClassName","role","MessageText","messageOrStory","withTranslucentThumbs","prepareStyle","mediaArea","rotation","coordinates","buildStyle","mediaDimensions","openMapModal","geo","geoPoint","handleMediaAreaClick","storyId","isPrivateStories","isArchivedStories","appConfig","users","byId","tabState","storyViewer","viewModal","isPrivacyModalOpen","isStealthModalOpen","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","isPremiumModalOpen","orderedIds","pinnedIds","archiveIds","selectUserStories","selectUserStory","shouldForcePause","reactionPicker","isSelf","selectIsCurrentUserPremium","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","areChatSettingsLoaded","settings","stealthMode","stories","isSingleStory","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","openNextStory","loadUserSkippedStories","openStoryViewModal","copyStoryLink","toggleStoryPinned","openChat","showNotification","openStoryPrivacyEditor","loadChatSettings","fetchChat","loadStoryViews","toggleStealthModal","serverTime","getServerTime","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","canPinToProfile","useCurrentOrPrev","isPinned","canUnpinFromProfile","areViewsExpired","canCopyLink","isPublic","usernames","canShare","canShareOwn","canPlayStory","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransition","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","useStoryPreloader","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","onMouseDown","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","onMouseLeave","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","onStart","onEnd","isLongPressActive","isPressed","timerId","canProcessEvent","cancel","useLongPress","hasAllData","useBackgroundMode","load","isPreload","keyCode","useEffectWithPrevDeps","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleVideoStoryTimeUpdate","handleOpenChat","handleOpenPrevStory","handleOpenNextStory","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleDeleteStoryClick","handleReportStoryClick","handleForwardClick","handleOpenStoryViewModal","handleInfoPrivacyEdit","handleInfoPrivacyClick","visibility","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","recentViewers","usersById","getGlobal","recentViewerIds","StoryProgress","renderStoriesTabs","formatRelativeTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","onPlaying","MediaAreaOverlay","viewsCount","reactionsCount","AvatarList","peers","renderRecentViewers","tabIndex","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","inputPlaceholder","onFocus","onBlur","lastViewedByUserIds","lastViewedId","userStories","openStoryViewer","lastReadId","hasUnreadStories","imageHash","thumbUrl","withStory","storyViewerMode","ANIMATION_DURATION_MS","IS_SAFARI","IS_FIREFOX","currentStoryId","isSingleUser","isPrivate","isArchive","byUserId","orderedUserIds","archived","active","userIds","areStoriesHidden","selectIsStoryViewerOpen","renderingUserId","setRenderingUserId","renderingStoryId","setRenderingStoryId","prevUserId","renderingIsArchive","renderingIsPrivate","renderingIsSingleUser","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingUserIds","slice","renderingUserPosition","currentUserPosition","timeoutId","timeOutId","calculateTransformX","reduce","transformX","entries","Story","renderStory","StoryPreview","renderStoryPreview","deleteStory","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","getUserFullName","actions","handler","isOnlyStories","ListItem","rightElement","reaction","ReactionStaticEmoji","withIconHeart","withPortalForMenu","menuBubbleClassName","PrivateChatInfo","noStatusOrTyping","status","formatDateAtTime","statusIcon","forceShowSelf","viewsById","nextOffset","isLoading","closeStoryViewModal","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","query","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViewIds","values","sort","a","b","prepareComparator","view","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","faded","contentClassName","isSlim","SearchInput","onScroll","InfiniteScroll","items","onLoadMore","StoryView","Array","_","PlaceholderChatInfo","contactListIds","saveCloseFriends","searchQuery","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","displayedIds","contactIds","unique","filterUsersByName","prevIsActive","handleSelectedContactIdsChange","handleSubmit","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","onSelectedIdsChange","onFilterChange","FloatingActionButton","isShown","lockedIds","onSelect","MEMO_EMPTY_ARRAY","OPTIONS","Screens","contactList","editStoryPrivacy","isOpenModal","openModal","closeModal","privacy","setPrivacy","setIsPinned","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","renderContent","storyLifeTime","seconds","hours","remainingSeconds","convertSecondsToHours","expireDate","option","checked","handleVisibilityChange","newVisibility","teactExperimentControlled","closeFriends","denyList","handleActionClick","Switcher","label","inactive","renderPrivacyList","CloseFriends","AllowDenyList","noBackdrop","onCloseAnimationEnd","renderHeaderContent","slideClassName","activateStealthMode","openPremiumModal","isOnCooldown","setIsOnCooldown","cooldownUntil","handleTimerEnds","handleActivate","initialSection","multiline","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","closeStoryPrivacyEditor","idStoryForDelete","setIdStoryForDelete","isPrevOpen","handleOpenDeleteModal","handleCloseDeleteModal","thumb","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StealthModeModal","StorySettings","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","clickArg","TopicIcon","letterClassName","Loading","GroupChatInfo","chats","listIds","orderedPinnedIds","activeListIds","archivedListIds","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","chatIds","isDeletedUser","sorted","sortChatIds","filterChatsByName","filterChatIdsByType","renderingIds","ChatOrUserPicker","isManyMessages","isStory","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getChatTitle","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","closeMapModal","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","openUrl","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","urlAuth","currentUserName","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","sandbox","allow","allowFullScreen","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","viewBox","fill","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","DeviceFrame","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","cycleRestrict","l","COLORS","hexToRgb","_COLORS$Math$ceil","isFontIcon","newIndex","colorA","colorB","ceil","r","g","lerpRgb","buttonClassName","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","DPR","currentUser","circleRef","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","section","PremiumFeatureItem","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","months","scrollLeft","scrollLeftOriginal","toString","reverseIndex","prevElement","reverseElement","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","PremiumFeaturePreviewStories","videoSections","PremiumFeaturePreviewVideo","videos","SliderDots","formatCurrency","amount","currency","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isClosing","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","handleOpenStatusSet","stickerSetTitle","template","first","second","split","emoji","thumbCustomEmojiId","CustomEmoji","link","isClosed","PremiumFeatureModal","isBig","PremiumLogo","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","closeGiftPremiumModal","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","currentIndex","stickerSetEl","isClose","animateScroll","contentForStatusMenuContext","arg","noContextMenu","isSavedMessages","isStatusPicker","canViewSet","observeIntersection","observeIntersectionForShowing","isSelected","noShowPremium","sharedCanvasRef","withTranslucentThumb","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","setEmojiStatus","menuRef","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","isCustomEmoji","hasEffect","isLocked","useIsIntersecting","shouldLoad","shouldPlay","isIntesectingForShowing","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","shouldRenderContextMenu","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","expires","getServerTimeOffset","shouldShowCloseButton","contextMenuItems","item","preventMessageInputBlurWithBubbling","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","withSharedAnimation","forceAlways","noFastClick","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","stickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","noContextMenus","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","addSetButtonText","pill","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","StickerButton","has","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","customEmoji","useCustomEmoji","colorFilter","useColorFilter","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","prefix","areAddedLoaded","allSets","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","some","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","StickerSetCover","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","Badge","isAlternateColor","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","ChatlistAlready","ChatlistNew","ChatlistDelete","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","onBackspace","onEsc","handleCopy","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","memberIds","leftId","rightId","handleCloseSeenByModal","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","LoadMoreDirection","formatIntegerCompact","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","secondaryIcon","narrow","highlight","buttonRef","activeElement","privateChatUserId","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","useSelectWithEnter","storyViewerOrigin","MuteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","ChatExtra","langName","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","setState","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","translation","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","onDragEnd","knobStyle","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","isStatic","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","itemName","maxChats","shouldHideChatTypes","onSelectedChatTypesChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","shownScreen","openShareChatFolderModal","editChatFolder","handleReset","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","subLabel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","allowDisabledClick","language","languages","canTranslate","canTranslateChats","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","rightIcon","onClickLabel","loadingOption","getPrivacyKey","screen","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","file","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","BlockUserModal","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","contactsIds","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","shouldUpdateStickerSetOrder","stickerSettingsRef","handleStickerSetClick","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","shouldShowLoginCodeInChatList","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","handleDownloadLog","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","onTransitionEnd","StoryToggler","canShow","StoryRibbon","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","isReactionPickerOpen","enabledReactions","maxUniqueReactions","anchor","targetHref","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onToggleReaction","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","shouldRenderAsHtml","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","menuElMinWidth","withScroll","handleOpenMessageReactionPicker","bubbleStyle","ReactionSelector","allAvailableReactions","currentReactions","onShowMore","messagesCount","MenuSeparator","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","selectIsReactionPickerOpen","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openChatLanguageModal","openMessageReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","PREVIEW_AVATAR_COUNT","msg","handleDelete","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","fullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","shouldCloseFast","setShouldCloseFast","setIsMuteModalOpen","isViewGroupInfoShown","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","DeleteChatModal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","getDayStartAt","isTouchScreen","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","REACTION_SELECTOR_WIDTH","storyUserId","sendAsMessage","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","sendStoryReaction","renderedMessageId","renderedChatId","renderedStoryUserId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","handleStoryReactionSelect","isFree","customEmojiMessage","parseMessageInput","buildCustomEmojiHtml","isReaction","chosenOrder","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","isForMessage","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","canSchedule","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","newOptions","requestNextMutation","list","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","noReplaceNewlines","native","IS_ELECTRON","PRODUCTION_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","handleMouseDown","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","isMessageComposer","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseEnter","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderPeer","forwardInfo","isChannelPost","originalSender","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","hasArrow","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","hardwareConcurrency","instances","IS_TEST","Worker","createConnector"],"sourceRoot":""}