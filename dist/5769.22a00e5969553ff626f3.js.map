{"version":3,"file":"5769.22a00e5969553ff626f3.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.module.scss?e66e","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const {\n    chatId, threadId, text, files,\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload) => {\n  const { noForumTopicPanel } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true, noForumTopicPanel,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ noForumTopicPanel: true });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n  });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload) => {\n  return updateGlobalSearch(global, {\n    isClosing: payload,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectThreadIdFromMessage,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToTopId = chat.isForum ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (!result) {\n    draft.isLocal = true;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat, selectThreadTopMessageId(global, chatId, threadId));\n});\n\nasync function unpinAllMessages(chat: ApiChat, threadId?: number) {\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, threadId || MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat, threadId);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat, threadId = MAIN_THREAD_ID) {\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id: chatId, threadId: topicId });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions) => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', async (global) => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global) => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global) => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, botUsername?: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  });\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateListedIds,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, threadId, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId);\n  global = updateListedIds(global, chat.id, threadId, newFoundIds);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(chat, threadId, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  });\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n  selectChatMessages,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n  const threadInfo = currentThreadId && currentChatId\n    ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n  // TODO Fix comments chat id, or refetch chat thread here\n  const activeCurrentChatId = threadInfo?.originChannelId || currentChatId;\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, activeThreadId);\n    acc[chatId].editingId = selectEditingId(global, chatId, activeThreadId);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, activeThreadId);\n\n    return acc;\n  }, {});\n\n  const currentChat = activeCurrentChatId ? global.chats.byId[activeCurrentChatId] : undefined;\n  if (activeCurrentChatId && currentChat) {\n    if (currentChat.isForum) {\n      getActions().loadTopics({ chatId: activeCurrentChatId, force: true });\n    }\n    const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentChatMessages = selectChatMessages(global, activeCurrentChatId);\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const topicLastMessages = currentChat.isForum && currentChat.topics\n        ? Object.values(currentChat.topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n        : [];\n\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages, topicLastMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, activeCurrentChatId, byId);\n      global = updateListedIds(global, activeCurrentChatId, activeThreadId, listedIds);\n      global = safeReplaceViewportIds(global, activeCurrentChatId, activeThreadId, listedIds);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, activeCurrentChatId, result.repliesThreadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, activeThreadId, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam, threadId,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            chatId, botId, startParam, threadId,\n          },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(\n  global: GlobalState, message: ApiMessage, userReactions: ApiReaction[],\n) {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload) => {\n  const { chatId, reaction } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(global.activeReactions, [messageId]) : {\n      ...global.activeReactions,\n      [messageId]: [\n        ...(global.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = {\n      ...global,\n      activeReactions: newActiveReactions,\n    };\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (!global.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = global.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...global.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(global.activeReactions, [messageId]);\n\n  return {\n    ...global,\n    activeReactions: newActiveReactions,\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((active) => active.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum } = selectChat(global, update.id) || {};\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      // The property `isForum` was changed in another client\n      if (currentChatId === update.id && 'isForum' in update.chat && prevIsForum !== update.chat.isForum) {\n        if (prevIsForum) {\n          actions.closeForumPanel();\n        }\n        actions.openChat({ id: currentChatId });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      setGlobal(replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          setGlobal(replaceThreadParam(global, id, threadId, 'typingStatus', undefined));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.repliesThreadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n  const topic = chat.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  return global;\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(call.isVideo);\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onScreenSelect={onScreenSelect}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing(true);\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing(false);\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  isForumPanelOpen={isForumPanelOpen}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = global.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: global.globalSearch.isClosing,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number) => {\n    const rate = PLAYBACK_RATES[newRate];\n    setAudioPlayerPlaybackRate({ playbackRate: rate });\n    setPlaybackRate(rate);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (isContextMenuOpen) return;\n    updatePlaybackRate(playbackRate === 1 ? 2 : 1);\n  }, [isContextMenuOpen, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0] || 1;\n    return (\n      <Button\n        round\n        className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Playback Rate\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handlePlaybackClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <span className=\"playback-button-inner\">\n          {playbackRate === 1 ? 2 : displayRate}Х\n        </span>\n      </Button>\n    );\n  }, [handleBeforeContextMenu, handleContextMenu, handlePlaybackClick, playbackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n        >\n          {renderPlaybackRateMenuItem(0.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(0.75, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(2, playbackRate, updatePlaybackRate)}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(rate: number, currentRate: number, onClick: (rate: number) => void) {\n  return (\n    <MenuItem\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={currentRate === PLAYBACK_RATES[rate] ? 'check' : undefined}\n      customIcon={currentRate !== PLAYBACK_RATES[rate] ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (lang('CommentsCount', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_LOADING = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO: Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={buildClassName('pictogram', isRoundVideo && 'round')}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"dots\":\"Nlcnrzv_f5cSxFsPOGt2\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"canvas\":\"a_WnxsI6X0B4j7QRRoOA\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useInterval from '../../../hooks/useInterval';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\nconst BLUR_RADIUS = 25;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const canvasRef = useCanvasBlur(thumbnail?.dataUri, false, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <canvas ref={canvasRef} className={styles.canvas} width={width} height={height} />\n      <div className={styles.dots} />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaAutZxIFX4go5HmM7Cg\",\"particle\":\"b5KMGtz_lQAs58tR80GG\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './CustomReactionAnimation.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomReactionAnimation: FC<OwnProps> = ({\n  reaction,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(stickerHash);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData) return undefined;\n\n  return (\n    <div className={styles.root}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomReactionAnimation);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomReactionAnimation from './CustomReactionAnimation';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 1.875 * REM;\nconst EFFECT_SIZE = 6.25 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomReactionAnimation reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const messageTopic = threadId === MAIN_THREAD_ID ? selectTopicFromMessage(global, message) : undefined;\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {!botInfo && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { hasPreview } from '../../../util/files';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, threadId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      const isQuick = requestedDraftFiles.every((file) => hasPreview(file));\n      handleFileSelect(requestedDraftFiles, isQuick);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n        shouldSuggestCustomEmoji={shouldSuggestCustomEmoji}\n        customEmojiForEmoji={customEmojiForEmoji}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId, threadId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockBeforeReply = chat?.isForum ? (threadId === MAIN_THREAD_ID && !replyingToId) : false;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !(isScheduledMessageList && chat?.isForum && threadId === MAIN_THREAD_ID)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockBeforeReply,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  isFirstTab?: boolean,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType, prevIsFirstTab]) => {\n    if (isFirstTab === prevIsFirstTab) {\n      return;\n    }\n\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, isFirstTab, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n  selectListedIds,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport { pickTruthy } from '../../util/iteratees';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  messageIds?: number[];\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  messageIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const chatMessages = useMemo(() => {\n    return messageIds && messagesById ? pickTruthy(messagesById, messageIds) : {};\n  }, [messagesById, messageIds]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    lastSyncTime,\n    serverTimeOffset,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange, isFirstTab);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messageIds = selectListedIds(global, chatId, topicId || MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      messageIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createLocationHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","selectChat","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noForumTopicPanel","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","isForum","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","topics","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","topicId","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","config","gifSearchUsername","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","timestamp","searchMessagesByDate","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","currentChatId","currentThreadId","activeThreadId","threadInfo","activeCurrentChatId","originChannelId","draftsByChatId","editingDraft","selectEditingDraft","currentChat","loadTopics","force","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","values","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userOrChat","avatarHash","userSearch","updateUserSearchFetchingStatus","searchUsers","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","omit","activeReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","prevIsForum","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","closeForumPanel","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","loadTopicById","ANIMATION_DELAY","updateReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","repliesThreadInfo","isTopicReply","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","selectScheduledIds","threadScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","newThreadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","oldOrder","newOrder","reorderStickerSets","loadStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","isForumPanelOpen","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","forumPanelChatId","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","style","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","renderPlaybackRateMenuItem","rate","currentRate","customIcon","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","handlePlaybackClick","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","noPreventDefault","RangeSlider","bold","forceOpen","onHide","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_LOADING","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","Avatar","withVideo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","canvasRef","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","stickerHash","getStickerPreviewHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","path","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","getReactionUniqueKey","requestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","messageTopic","hasTopicChip","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","entry","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","handleResize","contentRect","useResizeObserver","windowHeight","normalHeight","String","clientHeight","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","file","textToPaste","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","shouldUpdateStickerSetsOrder","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","hasPreview","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockBeforeReply","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","prevIsFirstTab","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}