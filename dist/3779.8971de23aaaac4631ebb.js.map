{"version":3,"file":"3779.8971de23aaaac4631ebb.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll text-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useEffect(() => {\n    return () => {\n      setIsVideoWaiting(false);\n    };\n  }, []);\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS, ARE_WEBCODECS_SUPPORTED } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = ARE_WEBCODECS_SUPPORTED && !IS_MOBILE ? 80 : 40;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useState, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from './hooks/useCurrentTimeSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\nimport { animateNumber } from '../../util/animation';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: Function | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/useCurrentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from './hooks/useCurrentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  IS_TOUCH_ENV, IS_IOS, IS_ANDROID, ARE_WEBCODECS_SUPPORTED,\n} from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst IS_PREVIEW_DISABLED = (IS_IOS || IS_ANDROID) && !ARE_WEBCODECS_SUPPORTED;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={sender.id} size=\"medium\" peer={sender} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUserName?: string;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUserName,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, currentUserName]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'infinite_reactions',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n  count: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  count,\n  onClick,\n}) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 1);\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          peer={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isInstalled && !isPopular;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">{lang('Stickers', stickerSet.stickers.length, 'i')}</span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, thumbCustomEmojiId, isLottie, isVideos: isVideo,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, idPrefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={idPrefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './ReactorListModal.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"icon-message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"syvgWO0b6lIEPd3iu1TA\",\"list-item\":\"_nKqEo7SgYwpaclSSCIx\",\"listItem\":\"_nKqEo7SgYwpaclSSCIx\",\"title\":\"R7LNh8TMqiktRuTuESsf\",\"subtitle\":\"so4259O2hcdGOxENXdqc\",\"languages\":\"DiSTH_4CZnPK8Dh8Tpfq\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  localContactIds,\n  localChatIds,\n  localUserIds,\n  globalChatIds,\n  globalUserIds,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState, TabState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n    };\n  };\n}\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { LoadMoreDirection } from '../../../types';\nimport type { StateProps } from './helpers/createMapStateToProps';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\nimport type { StateProps } from './helpers/createMapStateToProps';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadProfilePhotos({ profileId: currentUserId });\n    }\n  }, [currentUserId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    loadAuthorizations();\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUserId && (\n          <ProfileInfo\n            userId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll fab-padding-bottom\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useLastCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleCopyPrimaryClicked = useLastCallback(() => {\n    if (isDisabled) return;\n    copyLink(inviteLink);\n  });\n\n  const handleShare = useLastCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  });\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked} disabled={isDisabled}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={!url ? lang('Loading') : url}\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/windowEnvironment';\nimport { getSystemTheme } from '../../../util/systemTheme';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport {\n  playNotifySound,\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n} from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  canSetPasscode,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n    openPremiumModal,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  });\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUserId: string;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { getActions, withGlobal } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n      shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,\n      shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n      shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={cn('static-icon')}\n          src={staticIconData}\n          alt=\"\"\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName, { createClassNameBuilder } from '../../../util/buildClassName';\nimport {\n  isSameReaction, canSendReaction, getReactionUniqueKey, sortReactions,\n} from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  onShowMore: (position: IAnchorPosition) => void;\n  className?: string;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 6;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  onToggleReaction,\n  onShowMore,\n  className,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const availableReactions = useMemo(() => {\n    const reactions = allAvailableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }).filter(Boolean) || [];\n\n    return sortReactions(reactions, topReactions);\n  }, [allAvailableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions, topReactions]);\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useLastCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  });\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={buildClassName(cn('&', lang.isRtl && 'isRtl'), className)} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {reactionsToRender.map((reaction, i) => (\n            <ReactionSelectorReaction\n              key={getReactionUniqueKey(reaction.reaction)}\n              isReady={isReady}\n              onToggleReaction={onToggleReaction}\n              reaction={reaction}\n              noAppearAnimation={!canPlayAnimatedEmojis}\n              chosen={userReactionIndexes.has(i)}\n            />\n          ))}\n          {withMoreButton && (\n            <Button\n              color=\"translucent\"\n              className={cn('show-more')}\n              onClick={handleShowMoreClick}\n            >\n              <i className=\"icon icon-down\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport ReactionSelector from './ReactionSelector';\nimport AvatarList from '../../common/AvatarList';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: (ApiChat | ApiUser)[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, targetHref, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenReactionPicker}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n              <span className=\"MessageContextMenu--seen-by-label\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {canShowReactionsCount && message.reactors?.count ? (\n                  canShowSeenBy && seenByDatesCount\n                    ? lang(\n                      'Chat.OutgoingContextMixedReactionCount',\n                      [message.reactors.count, seenByDatesCount],\n                    )\n                    : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                ) : (\n                  seenByDatesCount === 1 && seenByRecentPeers\n                    ? renderText(\n                      isUserId(seenByRecentPeers[0].id)\n                        ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                        : (seenByRecentPeers[0] as ApiChat).title,\n                    ) : (\n                      seenByDatesCount\n                        ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                        : lang('Conversation.ContextMenuNoViews')\n                    )\n                )}\n              </span>\n            </span>\n            <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectCanTranslateMessage,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedMessageTranslationLanguage,\n  selectStickerSet,\n  selectRequestedChatTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n  isReactionPickerOpen,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, 3).map((id) => usersById[id] || chatsById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n  selectCanManage, selectIsRightColumnShown, selectCanTranslateChat,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    toggleManagement,\n    togglePeerTranslations,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    toggleManagement({ force: true });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {lang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {lang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGiftPremium = Boolean(\n      userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectTabState,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  position,\n  isTranslucent,\n  withCustomReactions,\n}) => {\n  const { toggleReaction, closeReactionPicker } = getActions();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(styles.menuContent, !withCustomReactions && styles.onlyReactions)}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !withCustomReactions}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={handleToggleCustomReaction}\n        onReactionSelect={handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const { chatId, messageId, position } = state.reactionPicker || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : false;\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_ELECTRON, PRODUCTION_URL } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_ELECTRON ? PRODUCTION_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, 'sticker-set', isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  const lang = useLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSelect = useLastCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  });\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const global = getGlobal();\n\n      let senderPeer = message.senderId\n        ? selectUser(global, message.senderId) || selectChat(global, message.senderId)\n        : undefined;\n\n      if (!senderPeer && message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        const originalSender = isChannelPost && fromChatId ? selectChat(global, fromChatId) : undefined;\n        if (originalSender) senderPeer = originalSender;\n      }\n\n      if (!senderPeer) {\n        return undefined;\n      }\n\n      return {\n        message,\n        senderPeer: senderPeer!,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderPeer, onClick,\n  }: {\n    message: ApiMessage;\n    senderPeer: ApiUser | ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          peer={senderPeer}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={senderPeer} withEmojiStatus />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const messagesById = selectChatMessages(global, chatId);\n    if (!messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../global/helpers';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiChat } from '../../api/types';\n\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"general\":\"CSjgq5gkTxM3iZQ9oJ9b\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","ARE_WEBCODECS_SUPPORTED","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","cancelAnimation","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","IS_PREVIEW_DISABLED","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","timing","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","peer","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","user","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","values","reduce","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","slideClassName","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUserName","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","onCheck","getUserFullName","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","query","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","viewBox","fill","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","hexToRgb","_COLORS$Math$ceil","newIndex","colorA","colorB","r","g","b","lerpRgb","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","PremiumTranslate","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","entries","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","selectStickerSet","currentIndex","stickerSetEl","isClose","animateScroll","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","reaction","availableReactions","isSelected","loadAndPlay","observeIntersection","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","fullClassName","documentId","CustomEmoji","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","withTranslucentThumb","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","stickerSet","isNearActive","favoriteStickers","isSavedMessages","isStatusPicker","isReactionPicker","isCurrentUserPremium","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","pill","fluid","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","isCustomEmoji","emoji","StickerButton","observeIntersectionForShowing","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","thumbCustomEmojiId","isVideos","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","offsetWidth","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","Picker","itemIds","lockedIds","onSelectedIdsChange","selectedIds","Badge","isAlternateColor","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","ChatlistAlready","ChatlistNew","ChatlistDelete","isSlim","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","memberIds","sort","leftId","rightId","handleCloseSeenByModal","noStatusOrTyping","formatDateAtTime","statusIcon","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","seenByUserIds","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","ReactionStaticEmoji","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","contextActions","useChatContextActions","useSelectWithEnter","MuteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","split","a","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","setState","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","translation","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","onDragEnd","knobStyle","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","currentUser","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","settings","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","itemName","maxChats","filterValue","shouldHideChatTypes","onSelectedChatTypesChange","onFilterChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","link","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","useEffectWithPrevDeps","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","shownScreen","openShareChatFolderModal","editChatFolder","handleReset","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","subLabel","IS_MAC_OS","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","canTranslateChats","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","rightIcon","onClickLabel","loadingOption","getPrivacyKey","screen","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","file","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userMainUsername","renderContact","BlockUserModal","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","filterPlaceholder","searchInputId","isSearchable","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","shouldUpdateStickerSetOrder","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","prevIsActive","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","shouldShowLoginCodeInChatList","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","handleDownloadLog","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","onTransitionEnd","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","cn","createClassNameBuilder","noAppearAnimation","chosen","onToggleReaction","mediaAppearData","appearAnimation","staticIconData","isAnimationLoaded","markAnimationLoaded","isFirstPlay","unmarkIsFirstPlay","activate","deactivate","onMouseEnter","allAvailableReactions","enabledReactions","currentReactions","maxUniqueReactions","onShowMore","canSendReaction","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","ReactionSelectorReaction","isReactionPickerOpen","anchor","targetHref","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","shouldAvoidNegativePosition","menuElMinWidth","transformOriginY","menuStyle","withScroll","useMenuPosition","handleOpenReactionPicker","bubbleStyle","ReactionSelector","messagesCount","AvatarList","peers","MenuSeparator","Skeleton","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","selectIsReactionPickerOpen","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openChatLanguageModal","openReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","msg","handleDelete","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","fullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","shouldCloseFast","setShouldCloseFast","setIsMuteModalOpen","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","DeleteChatModal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","isTouchScreen","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","reactionPicker","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","storedPosition","renderingPosition","withPortal","isDense","handleToggleCustomReaction","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","newOptions","requestNextMutation","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","noReplaceNewlines","native","IS_ELECTRON","PRODUCTION_URL","image","LOADED_EMOJIS","onMouseDown","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","noFastClick","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderPeer","forwardInfo","isChannelPost","originalSender","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","hasArrow","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","hardwareConcurrency","instances","IS_TEST","Worker","createConnector"],"sourceRoot":""}