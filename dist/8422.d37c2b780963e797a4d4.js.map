{"version":3,"file":"8422.d37c2b780963e797a4d4.js","mappings":"8VAuGA,MAGMA,EAA2C,CAC/CC,GAAIC,EAAAA,IACJC,WAAY,IACZC,KAAM,kBACNC,OAAO,EACPC,YAAa,IAETC,EAA4B,IAAIC,IAAI,CACxC,mBACA,qBACA,qBAGIC,GAA8BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAM,GAC3DC,GAA8BC,EAAAA,EAAAA,KAAUF,GAAOA,KAAM,KAAK,GAAO,GA0BvE,SAASG,EAAkBC,EAAgBC,IACzCC,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEF,SAAQC,YACzC,CAEA,SAASE,EACPC,EAAWC,EAAoBC,GAE/B,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADIC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAMK,GAAqBC,EAAAA,EAAAA,KAAyBZ,EAAQS,GACtDI,EAAgBF,GAAoBf,OACpCkB,EAAkBH,GAAoBd,SAE5C,GAAIgB,IAAkBA,IAAkBZ,GAAaa,IAAoBZ,GAAc,CACrF,MAAOa,EAAcC,GAAkBC,OAAOC,OAAOlB,EAAOmB,SACzDC,QAAO,CAAAC,EAAAC,KAAgE,IAA9DC,EAAkBC,GAAmBH,GAAIvC,GAAI2C,GAAYH,EACjE,GAAIG,IAAehB,GAAUc,GAAoBC,EAC/C,MAAO,CAACD,EAAkBC,GAG5B,MAAME,GAAmBd,EAAAA,EAAAA,KAAyBZ,EAAQyB,GACpDE,EAAaD,GAAkB9B,SAAWiB,EAGhD,MAAO,CAACU,GAAoBI,EAAYH,GAFnBG,GAAcD,GAAkB7B,WAAaiB,EAES,GAC1E,CAACD,IAAkBZ,GAAW,MAEFc,IAAiBC,IAGhDrB,EAAkBkB,EAAeE,EAAeD,OAAkBc,EAEtE,CACF,CAuxEAC,eAAeC,EACbC,EACAC,EACAC,GAGA,IAFAC,EAAa9B,UAAAC,OAAA,QAAAuB,IAAAxB,UAAA,IAAAA,UAAA,GACb+B,EAAyB/B,UAAAC,OAAA,EAAAD,UAAA,QAAAwB,EAGrB5B,GAASoC,EAAAA,EAAAA,MACTC,GAA0BC,EAAAA,EAAAA,KAA8BtC,IAASuC,QACrE,MAAMC,QAAe1C,EAAAA,EAAAA,IAAQ,aAAc,CACzC2C,MAAOC,EAAAA,IACPT,aACAU,SAAuB,aAAbZ,EACVa,WAAYV,EACZG,4BAGF,IAAKG,EACH,OAGF,MAAM,QAAEK,GAAYL,EAUpB,GARIK,EAAQxC,OAAS,GAAKwC,EAAQ,KAAOb,GACvCa,EAAQC,QAGV9C,GAASoC,EAAAA,EAAAA,MAETC,GAA0BC,EAAAA,EAAAA,KAA8BtC,IAASuC,QAE7DL,GAA8B,WAAbH,EAAuB,CAE1C,IAAKc,EAAQE,SAAShE,EAAAA,KAAgC,CACpD,MAAMiE,QAAgBlD,EAAAA,EAAAA,IAAQ,YAAa,CACzCb,KAAM,OACNgE,KAAMpE,IAGRmB,GAASoC,EAAAA,EAAAA,MAET,MAAMc,EAAoBF,IAAWG,EAAAA,EAAAA,KAAWnD,EAAQgD,EAAQpD,QAC5DsD,IACFL,EAAQO,QAAQF,EAAkBpE,IAClC0D,EAAOa,MAAMD,QAAQF,GACjBb,IACFa,EAAkBI,YAAcjB,GAGtC,CAEA,MAAMkB,EAAYtC,OAAOC,OAAOlB,EAAOmB,SACjCqC,EAAeD,EAAUE,SAAQC,IAAmB,IAAhB5E,GAAI2B,GAAOiD,EACnD,MAAMC,GAAcC,EAAAA,EAAAA,KAAkB5D,EAAQS,GAC9C,OAAOkD,EAAc,CAACA,GAAe,EAAE,IAGnCE,EAAeN,EAAUE,SAAQK,IAAmB,IAAhBhF,GAAI2B,GAAOqD,EACnD,OAAOC,EAAAA,EAAAA,KAAmB/D,EAAQS,IAAU,EAAE,IAG5CT,EAAOgE,eAAiBhE,EAAOiE,MAAMC,KAAKlE,EAAOgE,gBACnDH,EAAaM,KAAKnE,EAAOiE,MAAMC,KAAKlE,EAAOgE,gBAG7ChE,GAASoE,EAAAA,EAAAA,IAAapE,GAAQqE,EAAAA,EAAAA,IAAqBR,EAAaS,OAAO9B,EAAOyB,OAAQ,OACtFjE,GAASuE,EAAAA,EAAAA,IAAoBvE,EAAQwC,EAAOgC,kBAC5CxE,GAASyE,EAAAA,EAAAA,IAAazE,GAAQqE,EAAAA,EAAAA,IAAqBb,EAAac,OAAO9B,EAAOa,OAAQ,OACtFrD,GAAS0E,EAAAA,EAAAA,IAAmB1E,EAAQ+B,EAAUc,EAChD,MAAO,GAAIX,GAA8B,aAAbH,EAC1B/B,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAAS4E,EAAAA,EAAAA,IAAgB5E,EAAQwC,EAAOgC,kBACxCxE,GAAS6E,EAAAA,EAAAA,IAAY7E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,OAChErD,GAAS0E,EAAAA,EAAAA,IAAmB1E,EAAQ+B,EAAUc,OACzC,CACL,MAAMiC,GAAWT,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,MACpD,GAAIR,EAAQE,SAAShE,EAAAA,KAAgC,CACnD,MAAMmE,EAAoB4B,EAAS/F,EAAAA,KAC/BmE,GAAqBb,IACvByC,EAAS/F,EAAAA,KAAiC,IACrCmE,EACHI,YAAajB,GAGnB,CAEArC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAAS4E,EAAAA,EAAAA,IAAgB5E,EAAQwC,EAAOgC,kBACxCxE,GAAS6E,EAAAA,EAAAA,IAAY7E,EAAQ8E,GAC7B9E,GAAS+E,EAAAA,EAAAA,IAAkB/E,EAAQ+B,EAAUc,EAC/C,CAEA7C,GAASgF,EAAAA,EAAAA,IAA4BhF,EAAQ+B,EAAUS,IAE9BL,EAAkBK,EAAOK,QAAU5B,OAAOgE,KAAKzC,EAAO0C,aAC9DC,SAASvF,IACxB,MAAMwF,EAAQ5C,EAAO0C,WAAWtF,GAC1ByF,GAASC,EAAAA,EAAAA,KAAatF,EAAQJ,EAAQ2F,EAAAA,KAEvCH,GAAUC,MAEVG,EAAAA,EAAAA,KAAYxF,EAAQJ,EAAQ2F,EAAAA,KAAiBE,UAChDzF,GAAS0F,EAAAA,EAAAA,IACP1F,EAAQJ,EAAQ2F,EAAAA,GAAgB,QAASH,IAE7C,IAGqB,IAAnBvC,EAAQxC,QAAiBL,EAAOqD,MAAMsC,cAAc5D,KACtD/B,EAAS,IACJA,EACHqD,MAAO,IACFrD,EAAOqD,MACVsC,cAAe,IACV3F,EAAOqD,MAAMsC,cAChB,CAAC5D,IAAW,OAMpB6D,EAAAA,EAAAA,IAAU5F,EACZ,CAEO6B,eAAegE,EACpB7F,EAAW8F,EAAgCC,GAE3C,QAAAC,EAAA5F,UAAAC,OAAA4F,EAAA,IAAA1F,MAAAyF,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAA9F,UAAA8F,GAAA,IADIzF,GAAQC,EAAAA,EAAAA,OAAkBuF,EAE9B,MAAMzD,QAAe1C,EAAAA,EAAAA,IAAQ,gBAAiBiG,GAC9C,IAAKvD,EACH,OAGF,MAAM,MACJyB,EAAK,iBAAEO,EAAgB,SAAE2B,EAAQ,UAAEC,EAAS,aAAEC,GAC5C7D,EAWJ,GATAxC,GAASoC,EAAAA,EAAAA,MACL6B,IACFjE,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqBJ,EAAO,QAGpDO,IACFxE,GAAS4E,EAAAA,EAAAA,IAAgB5E,EAAQwE,IAG/B4B,EAAW,CACb,MAAME,GAAoBC,EAAAA,EAAAA,IAAgBvG,EAAQoG,EAAUtH,IAC5DkB,GAASwG,EAAAA,EAAAA,IACPxG,EACAoG,EAAUtH,IACV2H,EAAAA,EAAAA,IAAKL,EAAW,CAAC,kBAAmB,kBACpCxE,EACA0E,OAAoB1E,EAAYwE,EAAUM,kBAE9C,MAEqB9E,IAAjByE,IACFrG,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQ+F,EAAKjH,GAAI,CAAEuH,kBAEzCrG,GAAS4G,EAAAA,EAAAA,IAAoB5G,EAAQ+F,EAAKjH,GAAIqH,IAC9CP,EAAAA,EAAAA,IAAU5F,GAEV,MAAM6G,EAAaV,EAASU,WACtBC,EAAWD,IAAcE,EAAAA,EAAAA,KAAiB/G,EAAQ6G,GAWxD,OAVIA,IAAeC,GACjBhB,EAAQkB,aAAa,CACnBC,eAAgB,CACdnI,GAAI+H,EAAW/H,GACfE,WAAY6H,EAAW7H,YAEzByB,UAIG+B,CACT,CAqBOX,eAAeqF,EACpBlH,EACAmH,GAEAnH,GAASoC,EAAAA,EAAAA,MACT,MAAMgF,GAAYC,EAAAA,EAAAA,KAAqBrH,EAAQmH,GAC/C,GAAIC,IAAcA,EAAUlI,MAC1B,OAAOkI,EAGT,MAAM,KAAErB,EAAI,KAAE9C,SAAenD,EAAAA,EAAAA,IAAQ,oBAAqBqH,IAAa,CAAC,EACxE,OAAKpB,GAIL/F,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQ+F,EAAKjH,GAAIiH,GACjC9C,IACFjD,GAASsH,EAAAA,EAAAA,IAAWtH,EAAQiD,EAAKnE,GAAImE,KAGvC2C,EAAAA,EAAAA,IAAU5F,GAEH+F,QAZP,CAaF,CAyBAlE,eAAe0F,EACbvH,EAAW8F,EAAgCqB,GAE3C,QAAAK,EAAApH,UAAAC,OAAAoH,EAAA,IAAAlH,MAAAiH,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAtH,UAAAsH,GAAA,IADIjH,GAAQC,EAAAA,EAAAA,OAAkB+G,EAE9B,MAAM1B,QAAamB,EAAoBlH,EAAQmH,GAC/C,IAAKpB,EAAM,OAEX/F,GAASoC,EAAAA,EAAAA,MACT,MAAMa,GAAO0E,EAAAA,EAAAA,KAAW3H,EAAQ+F,EAAKjH,IACrC,IAAKmE,EAAM,OAGX,KADc2E,EAAAA,EAAAA,IAAU3E,GACZ,OACZ,MAAMT,QAAe1C,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C+H,IAAK5E,IAIP,GADAjD,GAASoC,EAAAA,EAAAA,MACJI,EAYL,OAHAxC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,QAC7D2B,EAAAA,EAAAA,IAAU5F,GAEHwC,EAAOqF,IAXZ/B,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,0CAChCtH,SAUN,CAmEAoB,eAAemG,EACbhI,EACA8F,EACAlG,EACAqI,EACAC,GAEA,QAAAC,EAAA/H,UAAAC,OAAA+H,EAAA,IAAA7H,MAAA4H,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAjI,UAAAiI,GAAA,IADI5H,GAAQC,EAAAA,EAAAA,OAAkB0H,EAE9BpI,GAASoC,EAAAA,EAAAA,MACT,MAAMyF,QAAYN,EAAqBvH,EAAQ8F,EAASmC,EAAQxH,GAC3DoH,GAEL/B,EAAQwC,cAAc,CACpBT,MACAjI,YAC2B,iBAAhBsI,GAA4B,CAAEK,WAAYL,GACrDzH,SAEJ,CAEOoB,eAAe2G,EACpBxI,EACA8F,EACAlG,GAEA,QAAA6I,EAAArI,UAAAC,OAAAqI,EAAA,IAAAnI,MAAAkI,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAvI,UAAAuI,GAAA,IADIlI,GAAQC,EAAAA,EAAAA,OAAkBgI,EAE9B,MAAM3C,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,KAAS6C,EAAAA,EAAAA,IAAiB7C,GAC7B,OAAOA,EAGT,MAAM8C,QArMDhH,eACL7B,EAAW8F,EAAgCC,GAEb,QAAA+C,EAAA1I,UAAAC,OAAA0I,EAAA,IAAAxI,MAAAuI,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAA5I,UAAA4I,GAAA,IAD1BvI,GAAQC,EAAAA,EAAAA,OAAkBqI,EAE9B,IAGE,aAFyBjJ,EAAAA,EAAAA,IAAQ,cAAeiG,EAGlD,CAAE,MAAOkD,GAOP,YANoC,sBAA/BA,EAAmB1G,QACtBuD,EAAQoD,sBAAsB,CAAEzG,MAAO,WAAYhC,UAEnDqF,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5I,UAI9E,CACF,CAoLwB6I,CAAYtJ,EAAQ8F,EAASC,EAAMtF,GACzD,OAAKoI,GAIL/C,EAAQD,aAAa,CAAEjG,OAAQiJ,EAAQ/J,GAAI2B,UAC3CqF,EAAQyD,SAAS,CAAEzK,GAAI+J,EAAQ/J,GAAI2B,UAE5BoI,QAPP,CAQF,EAhtFAW,EAAAA,EAAAA,IAAiB,0BAA0B3H,MAAO7B,EAAQ8F,KACxD,MAAM2D,EAAmB,IAAIpK,IAE7B,IAAK,IAAIqK,EAAI,EAAGA,EAAIC,EAAAA,IAAiCD,IAAK,OAClDE,EAAAA,EAAAA,IAvBiC,KAyBvC5J,GAASoC,EAAAA,EAAAA,MACT,MAAMyH,EAAiB5I,OAAOC,OAAOlB,EAAOmB,SAEzC2I,KAAIC,IAAA,IAAGjL,GAAI2B,GAAOsJ,EAAA,OAAKnJ,EAAAA,EAAAA,KAAyBZ,EAAQS,IAAQb,MAAM,IACtEoK,OAAOC,SAEJC,GAAsBC,EAAAA,EAAAA,IAAcC,EAAAA,KACpCC,EAAaH,GAAqBI,MAAMxL,IAAQ+K,EAAe9G,SAASjE,KAAQ2K,EAAiBc,IAAIzL,KAC3G,IAAKuL,EACH,OAGFZ,EAAiBe,IAAIH,GAErBvE,EAAQ2E,qBAAqB,CAAE7K,OAAQyK,EAAYxK,SAAU0F,EAAAA,GAAgB9E,OAAOC,EAAAA,EAAAA,OACtF,MAqCF8I,EAAAA,EAAAA,IAAiB,YAAY,CAACxJ,EAAQ8F,EAAS4E,KAC7C,MAAM,GACJ5L,EAAE,KAAEG,EAAI,kBAAE0L,EAAiB,qBAAEC,EAAoB,kBAAEC,EAAiB,MACpEpK,GAAQC,EAAAA,EAAAA,OACNgK,EAcJ,GAZA5E,EAAQgF,wBAAwB,CAC9BlL,OAAQd,EACRG,OACAY,SAAU0F,EAAAA,GACVoF,oBACAC,uBACAC,oBACApK,UAGFV,EAAgCC,EAAQlB,EAAIyG,EAAAA,GAAgB9E,IAEvD3B,EACH,OAGF,MAAM,cAAEkF,GAAkBhE,EACpB+F,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQlB,GAMhC,GAJIiH,GAAMgF,eACRjF,EAAQkF,iBAAiB,CAAElM,OAGxBiH,GASMkF,EAAAA,EAAAA,IAAkBlF,KAAUA,EAAK7G,OAC1C4G,EAAQoF,kBAAkB,CAAEtL,OAAQd,SATpC,GAAIA,IAAOkF,GACJlE,EAAAA,EAAAA,IAAQ,YAAa,CAAEb,KAAM,aAC7B,CACL,MAAMgE,GAAO0E,EAAAA,EAAAA,KAAW3H,EAAQlB,GAC5BmE,IACGnD,EAAAA,EAAAA,IAAQ,YAAa,CAAEb,KAAM,OAAQgE,QAE9C,CAIF6C,EAAQqF,iBAAiB,CAAE1K,SAAQ,KAGrC+I,EAAAA,EAAAA,IAAiB,cAAc3H,MAAO7B,EAAQ8F,EAAS4E,KACrD,MAAM,KACJzL,EAAI,WAAEmM,EAAU,kBAAET,EAAiB,qBAAEC,EAAoB,kBAAEC,EAAiB,eAC5EQ,EAAc,MACd5K,GAAQC,EAAAA,EAAAA,OACNgK,EACJ,IACI7K,EACAyL,EACAC,GAHA,OAAE3L,GAAW8K,EAKjB,GAAKU,EA6BE,CACL,MAAM,gBAAEI,EAAe,gBAAEC,GAAoBf,EAE7CY,EAAgBE,EAChBD,EAAkBE,CACpB,KAlCiB,CACfH,EAAgBZ,EAAQ9K,OACxBC,EAAW6K,EAAQ7K,SACnB0L,EAAkB1L,EAElB,MAAM6L,GAAevI,EAAAA,EAAAA,KAAWnD,EAAQsL,GACxC,GAAIzL,IAAa0F,EAAAA,GASf,YARAO,EAAQyD,SAAS,CACfzK,GAAIc,EACJX,OACA0L,oBACAC,uBACAC,oBACApK,UAGG,GAAIiL,GAAcC,QAWvB,YAVA7F,EAAQgF,wBAAwB,CAC9BlL,SACAX,OACAY,WACAuL,aACAT,oBACAC,uBACAC,oBACApK,SAIN,CAOA,MAAMsF,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQsL,GAC1BM,GAAaC,EAAAA,EAAAA,KAAiB7L,EAAQsL,EAAeC,GACrDlG,GAASC,EAAAA,EAAAA,KAAatF,EAAQsL,EAAeC,GACnD,IAAKxF,EAAM,OAIX,GAFAhG,EAAgCC,EAAQsL,EAAeC,EAAiB9K,GAEpEb,GACCgM,GAAY/L,WACXuL,GAAe/F,GAAQyG,WAAWzL,QAAUgF,EAAOyG,UAAU/I,SAAS6I,EAAW/L,WAerF,OAdAG,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BgM,mBAAepK,GACdnB,IACHmF,EAAAA,EAAAA,IAAU5F,QACV8F,EAAQgF,wBAAwB,CAC9BlL,SACAX,OACAY,SAAU+L,EAAW/L,SACrBuL,aACAT,oBACAC,uBACAC,oBACApK,UAKJ,IAAI,cAAEuL,IAAkBC,EAAAA,EAAAA,KAAejM,EAAQS,GAC3CuL,GACFrM,EAAkBqM,EAAcV,cAAeU,EAAcE,kBAG/DlM,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BgM,cAAe,CACbV,gBACAY,iBAAkBX,IAEnB9K,IACHmF,EAAAA,EAAAA,IAAU5F,GAEV,MAAMmM,EAAmBA,KAEvB,MAAMC,GAAgBhK,EAAAA,EAAAA,MAClBgJ,IACCxK,EAAAA,EAAAA,KAAyBwL,EAAe3L,IAAQb,SAAW0L,IAC3D1K,EAAAA,EAAAA,KAAyBwL,EAAe3L,IAAQZ,WAAa0L,GAGlEzF,EAAQqG,iBAAiB,CAAE1L,SAAQ,EAGhC2K,GACHtF,EAAQgF,wBAAwB,CAC9BlL,SACAX,OACAY,SAAUA,EACVY,QACA2K,aACAT,oBACAC,uBACAC,sBAIJ,MAAMrI,QAAe1C,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDiG,MAAM5C,EAAAA,EAAAA,KAAWnD,EAAQsL,GACzBe,UAAWd,IAKb,GAFAvL,GAASoC,EAAAA,EAAAA,MACT4J,GAAgBC,EAAAA,EAAAA,KAAejM,EAAQS,GAAOuL,cAC1CA,GAAeV,gBAAkBA,GAAiBU,GAAeE,mBAAqBX,EAA1F,CAKA,IAAK/I,EAYH,OAXAxC,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BgM,mBAAepK,GACdnB,IACHmF,EAAAA,EAAAA,IAAU5F,GAEV8F,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuBqD,EAAa,qBAAuB,yBACpE3K,eAGF0L,IAIFtM,IAAAA,EAAa2C,EAAO3C,UACpBD,IAAAA,EAAW4C,EAAO5C,QAEbA,GAKLI,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAASsM,EAAAA,EAAAA,IAAStM,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,OAC7DrD,GAASuM,EAAAA,EAAAA,IAAYvM,EAAQwC,EAAOgK,UAChCpB,IACFpL,GAASyM,EAAAA,EAAAA,IAAiBzM,EAAQsL,EAAeC,EAAiB,CAChE1L,aAGFG,GAASyM,EAAAA,EAAAA,IAAiBzM,EAAQJ,EAAQC,EAAU,CAClD6M,gBAAgB,EAChB7M,WACAD,SACA+M,cAAerB,EACfsB,cAAerB,KACXK,IACCiB,EAAAA,EAAAA,IAAKjB,EAAY,CAAC,gBAAiB,gBAAiB,yBAA0B,wBAGvF5L,GAAS8M,EAAAA,EAAAA,IAAa9M,EAAQJ,EAAQC,EAAU,CAC9CkN,eAAgBvK,EAAOuK,kBAEzBnH,EAAAA,EAAAA,IAAU5F,GAENqL,GACFvF,EAAQkH,aAAa,CACnBpN,SACAC,SAAUA,EACVwM,UAAWhB,EACX5K,UAIJqF,EAAQ2E,qBAAqB,CAC3B7K,SACAC,WACAY,QACAwM,QAASA,KACPjN,GAASoC,EAAAA,EAAAA,MACTpC,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BgM,mBAAepK,GACdnB,IACHmF,EAAAA,EAAAA,IAAU5F,GAEV8F,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,2BAChCtH,SACA,EAEJyM,SAAUA,KACRlN,GAASoC,EAAAA,EAAAA,MACT4J,GAAgBC,EAAAA,EAAAA,KAAejM,EAAQS,GAAOuL,cAC1CA,GAAeV,gBAAkBA,GAAiBU,GAAeE,mBAAqBX,IAI1FvL,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BgM,mBAAepK,GACdnB,IACHmF,EAAAA,EAAAA,IAAU5F,GAEV8F,EAAQgF,wBAAwB,CAC9BlL,SACAX,OACAY,SAAUA,EACVY,QACA2K,aACAT,oBACAC,uBACAC,sBACA,KA1EJsB,GArBF,MAFEA,GAmGA,KAGJ3C,EAAAA,EAAAA,IAAiB,kBAAkB3H,MAAO7B,EAAQ8F,EAAS4E,KACzD,MAAM,GAAE5L,EAAE,MAAE2B,GAAQC,EAAAA,EAAAA,OAAsBgK,EACpC3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQlB,GAChC,IAAKiH,EACH,OAGF,MAAMoH,QAAqBrN,EAAAA,EAAAA,IAAQ,gBAAiBiG,GAEhDoH,GAAchH,UAAUiH,cAC1BtH,EAAQyD,SAAS,CAAEzK,GAAIqO,EAAahH,SAASiH,aAAc3M,SAC7D,KAGF+I,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAO7B,EAAQ8F,EAAS4E,KAC1D,MAAM,MAAEjK,GAAQC,EAAAA,EAAAA,OAAsBgK,GAAW,CAAC,EAC5C3E,GAAOsH,EAAAA,EAAAA,KAAkBrN,GAC/B,GAAI+F,EAEF,YADAD,EAAQyD,SAAS,CAAEzK,GAAIiH,EAAKjH,GAAI8L,sBAAsB,EAAMnK,UAI9DqF,EAAQyD,SAAS,CAAEzK,GAAIwO,EAAAA,IAAa1C,sBAAsB,EAAMnK,UAEhE,MAAM+B,QAAe1C,EAAAA,EAAAA,IAAQ,YAAa,CAAEb,KAAM,YAC9CuD,GACFsD,EAAQyD,SAAS,CAAEzK,GAAI0D,EAAO5C,OAAQgL,sBAAsB,EAAMnK,SACpE,KAGF+I,EAAAA,EAAAA,IAAiB,gBAAgB3H,MAAO7B,EAAQ8F,EAAS4E,KACvD,MAAM3I,EAAW2I,EAAQ3I,UACnB,UAAEwL,GAAc7C,EACtB,IAAI,cAAExI,GAAkBwI,EACpBhB,EAAI,EAER,MAAM8D,EAAgBzH,GACbA,EAAKzC,aAAamK,MAAQ1H,EAAK2H,aAGxC,KAAOxL,IAAkBlC,EAAOqD,MAAMsC,cAAc5D,IAAW,CAC7D,GAAI2H,KA9XqB,IAoYvB,YALIiE,EAAAA,KAEFC,QAAQ3E,MAAM,mDAQlB,GAA+B,0BAF/BjJ,GAASoC,EAAAA,EAAAA,OAEEyL,iBAAmE,4BAArB7N,EAAO8N,UAC9D,OAGF,MAAMC,GAAW7L,GAAiBlC,EAAOqD,MAAM0K,QAAQhM,GACjDiM,EAAaD,EACfA,EAECjE,KAAKhL,GAAOkB,EAAOqD,MAAMa,KAAKpF,KAC9BkL,QAAQjE,GACPkE,QAAQlE,GAAQyH,EAAazH,KAC1BA,EAAKjH,KAAOC,EAAAA,OACXkP,EAAAA,EAAAA,KAAmBjO,EAAQ+F,EAAKjH,MAGrCoP,MAAK,CAACC,EAAOC,IAAUZ,EAAaW,GAAUX,EAAaY,KAAS,QACrExM,QAEEE,EACJC,EACAiM,GAAYlP,GACZkP,EAAaR,EAAaQ,QAAcpM,EACxCM,GACA,GAGEA,IACFqL,MACArL,GAAgB,GAGlBlC,GAASoC,EAAAA,EAAAA,KACX,MAGFoH,EAAAA,EAAAA,IAAiB,gBAAgB,CAACxJ,EAAQ8F,EAAS4E,KACjD,MAAM,OACJ9K,EAAM,MAAEyO,EAAK,MAAE5N,GAAQC,EAAAA,EAAAA,MAAiB,WAAE4N,GACxC5D,EACE3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EACH,OAGF,MAAMwI,EAAW1M,gBACTgE,EAAa7F,EAAQ8F,EAASC,EAAMtF,GACtC6N,GACFxI,EAAQ0I,kBAAkB,CAAEC,UAAW7O,GACzC,EAGEyO,EACGE,IAEL9O,EAA4B8O,EAC9B,KAGF/E,EAAAA,EAAAA,IAAiB,gBAAgB,KAC/BlK,GAA4B,KAC1BwC,EAAU,UACVA,EAAU,WAAW,GACrB,KAGJ0H,EAAAA,EAAAA,IAAiB,qBAAqB,CAACxJ,EAAQ8F,EAAS4E,KACtD,MAAM,OAAE9K,GAAW8K,EACb3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,IAIAjG,EAAAA,EAAAA,IAAQ,oBAAqB,CAChCiG,UACInG,IAAWb,EAAAA,KAAiC,CAC9C2P,kBAAkBpM,EAAAA,EAAAA,KAA8BtC,IAASuC,UAE3D,KAGJiH,EAAAA,EAAAA,IAAiB,wBAAwB,CAACxJ,EAAQ8F,EAAS4E,KACzD,MAAM,OAAE9K,EAAM,UAAE+O,EAAY,GAAMjE,EAC5B3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EACH,OAGF,MAAM6I,EAAUlE,EAAQkE,SAAWD,EAAY,EAE/C3O,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQJ,EAAQ,CAAEgP,aACtChJ,EAAAA,EAAAA,IAAU5F,IACLF,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEiG,OAAM6I,UAASD,aAAY,KAGpEnF,EAAAA,EAAAA,IAAiB,yBAAyB,CAACxJ,EAAQ8F,EAAS4E,KAC1D,MAAM,OAAE9K,EAAM,QAAEiP,EAAO,UAAEF,EAAY,GAAMjE,EACrC3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EACH,OAGF,MAAM6I,EAAUlE,EAAQkE,SAAWD,EAAY,EAE/C3O,GAAS8O,EAAAA,EAAAA,IAAY9O,EAAQJ,EAAQiP,EAAS,CAAED,aAChDhJ,EAAAA,EAAAA,IAAU5F,IACLF,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCiG,OAAM8I,UAASD,UAASD,aACxB,KAGJnF,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAO7B,EAAQ8F,EAAS4E,KACxD,MAAM,MACJqE,EAAK,MAAEC,EAAK,MAAEC,EAAK,UAAEC,EAAS,MAAEzO,GAAQC,EAAAA,EAAAA,OACtCgK,EAEEzG,EAASiL,EACZpF,KAAKhL,IAAO6I,EAAAA,EAAAA,KAAW3H,EAAQlB,KAC/BkL,OAAOC,SASV,IAAIkF,EACAC,EARJpP,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BqP,aAAc,CACZC,SAAUC,EAAAA,GAAqBC,aAEhC/O,IACHmF,EAAAA,EAAAA,IAAU5F,GAIV,IACE,MAAMwC,QAAe1C,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEiP,QAAOC,QAAO/K,UAC9DkL,EAAiB3M,GAAQiN,QACzBL,EAAoB5M,GAAQ4M,iBAC9B,CAAE,MAAOnG,GACPjJ,GAASoC,EAAAA,EAAAA,MAETpC,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BqP,aAAc,CACZC,SAAUC,EAAAA,GAAqBG,QAEhCjP,IAEHmF,EAAAA,EAAAA,IAAU5F,GAE0B,sBAA/BiJ,EAAmB1G,QACtBuD,EAAQoD,sBAAsB,CAAEzG,MAAO,WAAYhC,UAEnDqF,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5I,SAE9E,CAEA,IAAK0O,EACH,OAGF,MAAQrQ,GAAI6Q,EAAS,WAAE3Q,GAAemQ,EAEtCnP,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQ2P,EAAWR,GACvCnP,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BqP,aAAc,KACTpD,EAAAA,EAAAA,KAAejM,EAAQS,GAAO4O,aACjCC,SAAUH,EAAiBI,EAAAA,GAAqBK,SAAWL,EAAAA,GAAqBG,QAEjFjP,IACHmF,EAAAA,EAAAA,IAAU5F,GACV8F,EAAQyD,SAAS,CAAEzK,GAAI6Q,EAAW/E,sBAAsB,EAAMnK,UAE1D2O,IACFpP,GAASoC,EAAAA,EAAAA,MACTpC,GAAS6P,EAAAA,EAAAA,IAA+B7P,EAAQoP,EAAmBO,EAAWlP,IAC9EmF,EAAAA,EAAAA,IAAU5F,IAGR2P,GAAa3Q,GAAciQ,SACvBnP,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEF,OAAQ+P,EAAW3Q,aAAYiQ,SAClE,KAGFzF,EAAAA,EAAAA,IAAiB,eAAe3H,MAAO7B,EAAQ8F,EAAS4E,KACtD,MAAM,OAAE9K,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,EACxC3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EACH,OAGF,MAAQjH,GAAI6Q,EAAS,WAAE3Q,GAAe+G,EAEtC,GAAM4J,GAAa3Q,EAInB,UACQc,EAAAA,EAAAA,IAAQ,cAAe,CAAE6P,YAAW3Q,cAC5C,CAAE,MAAOiK,GAC6B,sBAA/BA,EAAmB1G,QACtBuD,EAAQoD,sBAAsB,CAAEzG,MAAO,WAAYhC,UAEnDqF,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5I,SAE9E,MAGF+I,EAAAA,EAAAA,IAAiB,kBAAkB,CAACxJ,EAAQ8F,EAAS4E,KACnD,MAAM,OAAE9K,EAAM,OAAEkQ,EAAM,MAAErP,GAAQC,EAAAA,EAAAA,OAAsBgK,EAChD3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC1BqD,GAAO0E,EAAAA,EAAAA,KAAW3H,EAAQ8P,GAC3B/J,GAAS9C,IAIdjD,GAAS+P,EAAAA,EAAAA,IAAU/P,EAAQJ,IAC3BgG,EAAAA,EAAAA,IAAU5F,IAENY,EAAAA,EAAAA,KAAyBZ,EAAQS,IAAQb,SAAWA,GACtDkG,EAAQyD,SAAS,CAAEzK,QAAI8C,EAAWnB,WAG/BX,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEiG,OAAM9C,SAAO,KAGhDuG,EAAAA,EAAAA,IAAiB,cAAc,CAACxJ,EAAQ8F,EAAS4E,KAC/C,MAAM,OAAE9K,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,EACxC3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,IAIL/F,GAAS+P,EAAAA,EAAAA,IAAU/P,EAAQJ,IAC3BgG,EAAAA,EAAAA,IAAU5F,IAENY,EAAAA,EAAAA,KAAyBZ,EAAQS,IAAQb,SAAWA,GACtDkG,EAAQyD,SAAS,CAAEzK,QAAI8C,EAAWnB,WAG/BX,EAAAA,EAAAA,IAAQ,aAAc,CAAEF,OAAQmG,EAAKjH,KAAK,KAGjD0K,EAAAA,EAAAA,IAAiB,gBAAgB,CAACxJ,EAAQ8F,EAAS4E,KACjD,MAAM,OAAE9K,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,EACxC3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EACH,OAGF/F,GAAS+P,EAAAA,EAAAA,IAAU/P,EAAQJ,IAC3BgG,EAAAA,EAAAA,IAAU5F,IAENY,EAAAA,EAAAA,KAAyBZ,EAAQS,IAAQb,SAAWA,GACtDkG,EAAQyD,SAAS,CAAEzK,QAAI8C,EAAWnB,UAGpC,MAAQ3B,GAAI6Q,EAAS,WAAE3Q,GAAe+G,EAClC4J,GAAa3Q,IACVc,EAAAA,EAAAA,IAAQ,eAAgB,CAAE6P,YAAW3Q,cAC5C,KAGFwK,EAAAA,EAAAA,IAAiB,iBAAiB,CAACxJ,EAAQ8F,EAAS4E,KAClD,MAAM,OAAE9K,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,EACxC3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EACH,OAGF/F,GAAS+P,EAAAA,EAAAA,IAAU/P,EAAQJ,IAC3BgG,EAAAA,EAAAA,IAAU5F,IAENY,EAAAA,EAAAA,KAAyBZ,EAAQS,IAAQb,SAAWA,GACtDkG,EAAQyD,SAAS,CAAEzK,QAAI8C,EAAWnB,UAGpC,MAAQ3B,GAAI6Q,EAAS,WAAE3Q,GAAe+G,EAClC4J,GAAa3Q,IACVc,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE6P,YAAW3Q,cAC7C,KAGFwK,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAO7B,EAAQ8F,EAAS4E,KAC1D,MAAM,MACJqE,EAAK,UAAEG,EAAS,MAAED,EAAK,MAAExO,GAAQC,EAAAA,EAAAA,OAC/BgK,EACEzG,EAASiL,EACZpF,KAAKhL,IAAO6I,EAAAA,EAAAA,KAAW3H,EAAQlB,KAC/BkL,OAAOC,SASV,IAAI+F,EAPJhQ,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BqP,aAAc,CACZC,SAAUC,EAAAA,GAAqBC,aAEhC/O,IACHmF,EAAAA,EAAAA,IAAU5F,GAGV,IACE,MAAQ+F,KAAMkK,EAAW,kBAAEb,SAA4BtP,EAAAA,EAAAA,IAAQ,kBAAmB,CAChFiP,QACA9K,WACI,CAAC,EAEP,IAAKgM,EACH,OAGF,MAAQnR,GAAIc,GAAWqQ,EACvBD,EAAgBpQ,EAEhBI,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQJ,EAAQqQ,GACpCjQ,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BqP,aAAc,KACTpD,EAAAA,EAAAA,KAAejM,EAAQS,GAAO4O,aACjCC,SAAUW,EAAcV,EAAAA,GAAqBK,SAAWL,EAAAA,GAAqBG,QAE9EjP,IACHmF,EAAAA,EAAAA,IAAU5F,GACV8F,EAAQyD,SAAS,CACfzK,GAAIc,EACJgL,sBAAsB,EACtBnK,UAEE2O,IACFpP,GAASoC,EAAAA,EAAAA,MACTpC,GAAS6P,EAAAA,EAAAA,IAA+B7P,EAAQoP,EAAmBxP,EAAQa,IAC3EmF,EAAAA,EAAAA,IAAU5F,IAGRJ,GAAUqP,SACNnP,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BF,SACAqP,SAGN,CAAE,MAAOiB,GAC2B,kBAA7BA,EAAiB3N,SACpBvC,GAASoC,EAAAA,EAAAA,MACTpC,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9BqP,aAAc,KACTpD,EAAAA,EAAAA,KAAejM,EAAQS,GAAO4O,aACjCC,SAAUC,EAAAA,GAAqBG,MAC/BzG,MAAO,qBAERxI,IACHmF,EAAAA,EAAAA,IAAU5F,IAC6B,4BAA7BkQ,EAAiB3N,UAC3BvC,GAASoC,EAAAA,EAAAA,MACTpC,GAAS6P,EAAAA,EAAAA,IAA+B7P,EAAQiE,EAAM6F,KAAIqG,IAAA,IAAC,GAAErR,GAAIqR,EAAA,OAAKrR,CAAE,IAAGkR,EAAgBvP,IAC3FmF,EAAAA,EAAAA,IAAU5F,GAEd,MAGFwJ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACxJ,EAAQ8F,EAAS4E,KACrD,MAAM,GAAE5L,EAAE,SAAEsR,EAAQ,MAAE3P,GAAQC,EAAAA,EAAAA,OAAsBgK,EAC9C3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQlB,GAChC,IAAKiH,EACH,OAGF,MAAMtD,GAAQ4N,EAAAA,EAAAA,GAAmBrQ,EAAQ,sBAEzC,GAAIoQ,EAAU,CACZ,MAAME,GAASC,EAAAA,EAAAA,KAAiBvQ,EAAQoQ,GACxC,GAAIE,EAAQ,CACV,MAAME,IAAkBvC,EAAAA,EAAAA,KAAmBjO,EAAQlB,EAAIsR,IAEjD,cAAEK,EAAa,gBAAEC,GAAoBJ,EACrCK,EAAeH,EACjB,CAAC1R,KAAQ2R,GAAiB,KACzBA,GAAiB,IAAIzG,QAAQ4G,GAAaA,IAAa9R,IAGtD+R,EAAqB,CAAC/R,KAAO4R,IAE9B5Q,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7BhB,GAAIsR,EACJU,aAAc,IACTR,EACHG,cAAeE,EACfD,gBAAiBG,IAGvB,CACF,KAAO,CACL,MAAM9O,GAAWgP,EAAAA,EAAAA,KAAmB/Q,EAAQlB,GACtCkS,GAAW/C,EAAAA,EAAAA,KAAmBjO,EAAQlB,EAAiB,aAAbiD,EAA0BkP,EAAAA,SAAqBrP,GAEzFsP,EAAMlR,EAAOqD,MAAM8N,iBAA8B,aAAbpP,EAA0B,WAAa,UACjF,IAAKmP,GAAK7Q,QAAU,IAAMoC,IAAUuO,EAKlC,YAJAlL,EAAQoD,sBAAsB,CAC5BzG,MAAO,qBACPhC,WAICX,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEiG,OAAMyK,gBAAiBQ,GAC5D,MAGFxH,EAAAA,EAAAA,IAAiB,sBAAsB,CAACxJ,EAAQ8F,EAAS4E,KACvD,MAAM,GAAE5L,GAAO4L,EACT3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQlB,GAC5BiH,IACGjG,EAAAA,EAAAA,IAAQ,qBAAsB,CACjCiG,OACAqK,UAAUgB,EAAAA,EAAAA,IAAerL,GAAQ,EAAIkL,EAAAA,KAEzC,KAGFzH,EAAAA,EAAAA,IAAiB,mBAAmB3H,UAClC,MAAMwP,QAAoBvR,EAAAA,EAAAA,IAAQ,oBAE9BuR,IACFrR,GAASoC,EAAAA,EAAAA,MAETpC,EAAS,IACJA,EACHqR,YAAa,IACRrR,EAAOqR,eACPA,KAGPzL,EAAAA,EAAAA,IAAU5F,GACZ,KAGFwJ,EAAAA,EAAAA,IAAiB,8BAA8B3H,UAC7C,MAAMyP,QAA+BxR,EAAAA,EAAAA,IAAQ,+BAEzCwR,IACFtR,GAASoC,EAAAA,EAAAA,MAETpC,EAAS,IACJA,EACHqR,YAAa,IACRrR,EAAOqR,YACVE,YAAaD,KAGjB1L,EAAAA,EAAAA,IAAU5F,GACZ,KAGFwJ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACxJ,EAAQ8F,EAAS4E,KACpD,MAAM,OACJ9K,EAAM,YAAE4R,EAAW,SAAEC,EAAQ,MAAEhR,GAAQC,EAAAA,EAAAA,OACrCgK,EACEjI,GAAQ4N,EAAAA,EAAAA,GAAmBrQ,EAAQ,sBAElByR,EACpBC,MAAM5S,IAAOyR,EAAAA,EAAAA,KAAiBvQ,EAAQlB,GAAK4R,gBAAgBrQ,QAAUoC,IAEtEqD,EAAQoD,sBAAsB,CAAEzG,MAAO,qBAAsBhC,WAI/D+Q,EAAYrM,SAAQtD,UAClB,MAAMyO,GAASC,EAAAA,EAAAA,KAAiBvQ,EAAQlB,GACpCwR,SACIxQ,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BhB,KACAgS,aAAc,IACTR,EACHG,cAAeH,EAAOG,eAAezG,QAAQ4G,GAAaA,IAAahR,IACvE8Q,gBAAiBJ,EAAOI,gBAAgB1G,QAAQ2H,GAAeA,IAAe/R,MAGpF,IAGF6R,EAAStM,SAAQtD,UACf,MAAMyO,GAASC,EAAAA,EAAAA,KAAiBvQ,EAAQlB,GACpCwR,SACIxQ,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BhB,KACAgS,aAAc,IACTR,EACHI,gBAAiBJ,EAAOI,gBAAgBpM,OAAO1E,KAGrD,IACA,KAGJ4J,EAAAA,EAAAA,IAAiB,kBAAkB,CAACxJ,EAAQ8F,EAAS4E,KACnD,MAAM,GAAE5L,EAAE,aAAEgS,GAAiBpG,EACvB4F,GAASC,EAAAA,EAAAA,KAAiBvQ,EAAQlB,GAEpCwR,IACGxQ,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7BhB,KACAgS,aAAc,CACZhS,KACA8S,SAAUtB,EAAOsB,SACjBnB,cAAeH,EAAOG,iBACnBK,IAGT,KAGFtH,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAO7B,EAAQ8F,EAAS4E,KACxD,MAAM,OAAE4F,EAAM,MAAE7P,GAAQC,EAAAA,EAAAA,OAAsBgK,GACxC,WAAEmH,EAAU,KAAE3N,GAASlE,EAAOqR,YAE9B5O,GAAQ4N,EAAAA,EAAAA,GAAmBrQ,EAAQ,iBACzC,GAAIiB,OAAOgE,KAAKf,GAAM7D,QAAUoC,EAK9B,YAJAqD,EAAQoD,sBAAsB,CAC5BzG,MAAO,gBACPhC,UAKJ,MAAMqR,EAAQC,KAAKC,OAAQH,GAAc,GAAKZ,EAAAA,MAGtCnS,GAAImT,EAAa,YAAEC,KAAgBC,GAAc7B,EAEnD8B,EAAQN,EAAQ,EAChBhB,EAAe,CACnBhS,GAAIsT,KACDD,GAsBL,SApBMrS,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BhB,GAAIsT,EACJtB,iBAIFhL,EAAQuM,UAAU,CAChB,QAAS,mBACTvT,GAAIsT,EACJ9B,OAAQQ,IAGVhL,EAAQwM,0BAA0B,CAChCC,cAAe,CACbtT,KAAM,cACNyL,QAASoH,EAAQ,GAEnBrR,WAGGyR,EACH,OAGFlS,GAASoC,EAAAA,EAAAA,MACT,MAAM,YAAEmP,GAAgBvR,EAAOqR,YAE3BE,IACFvR,EAAS,IACJA,EACHqR,YAAa,IACRrR,EAAOqR,YACVE,YAAaA,EAAYvH,QAAOwI,IAAA,IAAC,GAAE1T,GAAI0T,EAAA,OAAK1T,IAAOmT,CAAa,OAGpErM,EAAAA,EAAAA,IAAU5F,GACZ,KAGFwJ,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAO7B,EAAQ8F,EAAS4E,KAC1D,MAAM,UAAE+H,GAAc/H,QAED5K,EAAAA,EAAAA,IAAQ,kBAAmB2S,KAE9CzS,GAASoC,EAAAA,EAAAA,MACTpC,EAAS,IACJA,EACHqR,YAAa,IACRrR,EAAOqR,YACVQ,WAAYY,KAGhB7M,EAAAA,EAAAA,IAAU5F,GACZ,KAGFwJ,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAO7B,EAAQ8F,EAAS4E,KAC3D,MAAM,GAAE5L,GAAO4L,GACA6F,EAAAA,EAAAA,KAAiBvQ,EAAQlB,UAGhCgB,EAAAA,EAAAA,IAAQ,mBAAoBhB,EACpC,KAGF0K,EAAAA,EAAAA,IAAiB,oBAAoB,CAACxJ,EAAQ8F,EAAS4E,KACrD,MAAM,GAAE5L,GAAO4L,EACT3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQlB,GAC5BiH,IACEA,EAAK2M,aACF5S,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEiG,OAAMlG,SAAU0F,EAAAA,MAEjDzF,EAAAA,EAAAA,IAAQ,qBAAsB,CACjCiG,OACAgF,eAAgBhF,EAAKgF,gBAG3B,KAGFvB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACxJ,EAAQ8F,EAAS4E,KAClD,MAAM,OAAE9K,EAAM,QAAEiP,GAAYnE,EACtB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EAAM,OAEX,MAAM4M,EAAqB5M,EAAK6M,SAAS/D,IAAUgE,cAC9CF,KAEA7S,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCiG,OACAlG,SAAUgP,EACViD,MAAOa,IAGT3S,GAASoC,EAAAA,EAAAA,MACTpC,GAAS8O,EAAAA,EAAAA,IAAY9O,EAAQJ,EAAQiP,EAAS,CAC5C6D,YAAa,IAEf1S,GAASyM,EAAAA,EAAAA,IAAiBzM,EAAQJ,EAAQiP,EAAS,CACjDiE,uBAAwBH,KAE1B/M,EAAAA,EAAAA,IAAU5F,GAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAO7B,EAAQ8F,EAAS4E,KAC3D,MAAM,KAAEqI,EAAI,MAAEtS,GAAQC,EAAAA,EAAAA,OAAsBgK,EAEtClI,QAAe1C,EAAAA,EAAAA,IAAQ,mBAAoBiT,GAC5CvQ,GAILsD,EAAQyD,SAAS,CAAEzK,GAAI0D,EAAO5C,OAAQa,SAAQ,KAGhD+I,EAAAA,EAAAA,IAAiB,yBAAyB3H,MAAO7B,EAAQ8F,EAAS4E,KAChE,MAAM,YACJvL,EAAW,YAAE+I,EAAW,OAAED,EAAM,MAAExH,GAAQC,EAAAA,EAAAA,OACxCgK,EAGJ5E,EAAQyD,SAAS,CAAEzK,GAAIwO,EAAAA,IAAa7M,UAEpC,MAAMsF,QAijDDlE,eAA6D7B,EAAWb,GAC7Ea,GAASoC,EAAAA,EAAAA,MACT,MAAM4Q,GAAYC,EAAAA,EAAAA,KAAwBjT,EAAQb,GAClD,GAAI6T,IAAcA,EAAU9T,MAC1B,OAAOiE,EAAAA,EAAAA,KAAWnD,EAAQgT,EAAUlU,IAGtC,MAAM,KAAEiH,EAAI,KAAE9C,SAAenD,EAAAA,EAAAA,IAAQ,uBAAwBX,IAAgB,CAAC,EAC9E,OAAK4G,GAIL/F,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQ+F,EAAKjH,GAAIiH,GAEjC9C,IACFjD,GAASsH,EAAAA,EAAAA,IAAWtH,EAAQiD,EAAKnE,GAAImE,KAEvC2C,EAAAA,EAAAA,IAAU5F,GAEH+F,QAZP,CAaF,CAtkDqBmN,CAAuBlT,EAAQb,GAClD,IAAK4G,EAMH,OALAD,EAAQqG,iBAAiB,CAAE1L,eAC3BqF,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,mCAAmCoL,QAAQ,UAAWhU,GACtFsB,UAKJqF,EAAQyD,SAAS,CAAEzK,GAAIiH,EAAKjH,GAAI2B,UAE5BwH,GAEFD,EADAhI,GAASoC,EAAAA,EAAAA,MACsB0D,EAASC,EAAKjH,GAAImJ,EAAQC,EAAazH,EACxE,KAGF+I,EAAAA,EAAAA,IAAiB,oBAAoB,CAACxJ,EAAQ8F,EAAS4E,KACrD,MAAM,IACJ0I,EAAG,MACH3S,GAAQC,EAAAA,EAAAA,OACNgK,GAEE,sBACJ2I,EAAqB,iBACrBC,EAAgB,eAChBC,EAAc,kBACdC,EAAiB,oBACjBC,EAAmB,iBACnB3L,EAAgB,aAChBkF,EAAY,YACZ0G,EAAW,2BACXC,EAA0B,oBAC1BC,EACAC,mBAAoBC,EAAwB,0BAC5CC,EAAyB,uBACzBC,EAAsB,cACtBC,GACEnO,EAEJ,GAAIsN,EAAIc,MAAMC,EAAAA,KAEZ,YADAC,EAAAA,EAAAA,IAAgBhB,GAIlB,MAAMiB,EAAM,IAAIC,IAAIlB,EAAImB,cAAcC,WAAW,QAAUpB,EAAO,WAAUA,KAC5E,GAAIqB,EAAAA,IAAgBlK,IAAI8J,EAAIK,WAA8B,MAAjBL,EAAIM,SAE3C,YADAC,OAAOC,KAAKR,EAAIS,WAAY,SAAU,YAIxC,MACMC,GADWN,EAAAA,IAAgBlK,IAAI8J,EAAIK,UAAY,OAASL,EAAIK,UACvCM,MAAM,KACjC,GAAID,EAAU1U,OAAS,EAAG,OAC1B,MAAMsU,EAAgC,IAArBI,EAAU1U,OAAgB,GAAE0U,EAAU,MAAMV,EAAIM,WAAaN,EAAIM,UAC3EM,EAAOC,EAAOC,GAASR,EAASK,MAAM,KAAKhL,OAAOC,SAASH,KAAKsL,GAASC,UAAUD,KACpFE,EAASrU,OAAOsU,YAAYlB,EAAImB,cAEtC,IAAIzC,EACU,aAAVkC,IACFlC,EAAOmC,GAGT,MAAMO,EAAiBH,EAAOI,eAAe,eACvCC,EAAcL,EAAOI,eAAe,YACpCE,GAASC,EAAAA,EAAAA,IAAqBP,EAAOM,QACrCE,EAAoB,MAAVZ,IAAkBa,OAAOZ,SAAUvT,GAC7CoU,EAAWV,EAAOI,eAAe,SAEvC,GAAIT,EAAMf,MAAM,qBAOd,YANAb,EAAsB,CACpBlU,YAAa8V,EAAMgB,OAAO,EAAGhB,EAAM5U,OAAS,GAC5C6H,YAAaoN,EAAOY,YACpBjO,OAAQqN,EAAOrN,OACfxH,UAKJ,GAAIqV,EAOF,YANA/B,EAA0B,CACxB5M,SAAU8N,EACVa,UACArV,UAUJ,IAJIwU,EAAMT,WAAW,MAAQS,EAAMT,WAAW,QAC5CzB,EAAOkC,EAAMgB,OAAO,EAAGhB,EAAM5U,OAAS,IAGpC0S,EAEF,YADAO,EAAiB,CAAEP,OAAMtS,UAI3B,GAAc,gBAAVwU,GAAqC,aAAVA,EAO7B,YANA1B,EAAe,CACbtM,eAAgB,CACdkP,UAAWjB,GAEbzU,UAKJ,GAAc,UAAVwU,EAGF,YADAzB,EAAkB,CAAE4C,MADPC,EAAAA,EAAAA,IAAgBf,EAAOlC,IAAKkC,EAAOc,MACtB3V,UAI5B,GAAc,YAAVwU,EAGF,YADArB,EAAoB,CAAE0C,KADTpB,EACezU,UAI9B,GAAc,aAAVwU,EAGF,YADAhB,EAAc,CAAEqC,KADHpB,EACSzU,UAIxB,MAAM8V,EAAsBrB,QAAStT,EAC/ByK,EAAY8I,EAAQY,OAAOZ,QAASvT,EACpC4U,EAAYlB,EAAOmB,QAAUV,OAAOT,EAAOmB,cAAW7U,EAE5D,GAAI0T,EAAOI,eAAe,cAAgBJ,EAAOI,eAAe,cAC9DjC,EAAoB,CAClBtM,SAAU8N,EACVyB,WAAYpB,EAAOqB,WAAarB,EAAOsB,WACvCnW,eAEG,GAAc,UAAVwU,EAAmB,CAC5B,MAAM9N,EAAW+N,EACXpW,EAAKwW,EAAOuB,EAIlB7C,EAAuB,CACrB8C,aAAc3P,GAAYrI,EAC1BiY,WAJiB5P,GAAY8C,QAAQnL,GAKrC2B,SAEJ,MAAO,GAAIuV,EAEThC,EAAuB,CACrB8C,aAAcP,GAAuBtB,EACrC8B,UAH0B,MAAV9B,GAAiBhL,QAAQsM,GAIzC9V,eAEG,GAAc,MAAVwU,GAAiBsB,GAAuBlK,EAAW,CAC5D,MAAMzM,GAASoX,EAAAA,EAAAA,IAAYT,GACrBxQ,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EAEH,YADA+B,EAAiB,CAAEvF,QAAS,sBAAuB9B,UAIjD4L,GACFW,EAAa,CACXpN,OAAQmG,EAAKjH,GACbuN,YACA5L,SAGN,MAAWwU,EAAMT,WAAW,KAC1Bd,EAAY,CACV4C,KAAMrB,EAAMgC,UAAU,GACtBxW,UAEiB,YAAVwU,EACTvB,EAAY,CACV4C,KAAMpB,EACNzU,UAEQgV,GAAkBG,IAAaV,GAASS,EAClDhC,EAA2B,CACzBxM,SAAU8N,EACVjL,OAAQ4L,EACRrN,WAAY+M,EAAOY,aAAeZ,EAAO4B,SACzCzW,UAGFqT,EAAyB,CACvB3M,SAAU8N,EACV5I,UAAWA,GAAa0J,OAAOQ,GAC/B1W,SAAUwM,EAAY0J,OAAOQ,QAAuB3U,EACpD4U,YACAjO,WAAY+M,EAAO6B,MACnBjP,YAAaoN,EAAOY,YACpBjO,OAAQqN,EAAOrN,OACfmP,SAAU9B,EAAO4B,SACjBG,cAAe,CAACpC,EAAOC,EAAOC,GAC9B1U,SAEJ,KAGF+I,EAAAA,EAAAA,IAAiB,0BAA0B3H,MAAO7B,EAAQ8F,EAAS4E,KACjE,MAAM,aAAEoM,EAAY,UAAEC,EAAS,MAAEtW,GAAQC,EAAAA,EAAAA,OAAsBgK,EAE/D,IAAI3E,EAEJ,GAAIgR,EAAW,CACb,MAAMnX,GAASoX,EAAAA,EAAAA,IAAYF,GAE3B,GADA/Q,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,IACrBmG,EAEH,YADAD,EAAQgC,iBAAiB,CAAEvF,QAAS,sBAAuB9B,SAG/D,MAEE,GADAsF,QAAamB,EAAoBlH,EAAQ8W,IACpC/Q,EAEH,YADAD,EAAQgC,iBAAiB,CAAEvF,QAAS,sBAAuB9B,WAK1D6W,EAAAA,EAAAA,IAAcvR,GAKnBD,EAAQyR,eAAe,CACrB3X,OAAQmG,EAAKjH,GACb2B,UANAqF,EAAQyD,SAAS,CAAEzK,GAAIiH,EAAKjH,GAAI2B,SAOhC,KAGJ+I,EAAAA,EAAAA,IAAiB,4BAA4B3H,MAAO7B,EAAQ8F,EAAS4E,KACnE,MAAM,KAAEqI,EAAI,MAAEtS,GAAQC,EAAAA,EAAAA,OAAsBgK,EACtClI,QAAe1C,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEiT,SAC9CvQ,GAILsD,EAAQyD,SAAS,CAAEzK,GAAI0D,EAAO1D,GAAI2B,SAAQ,KAG5C+I,EAAAA,EAAAA,IAAiB,sBAAsB3H,MAAO7B,EAAQ8F,EAAS4E,KAC7D,MAAM,SACJvD,EAAQ,UAAEkF,EAAS,UAAEmK,EAAS,WAAEjO,EAAU,YAAEL,EAAW,OAAED,EAAM,SAAEpI,EAAQ,cAAEwX,EAAa,SAAED,EAAQ,MAClG3W,GAAQC,EAAAA,EAAAA,OACNgK,EAEE3E,GAAOnC,EAAAA,EAAAA,KAAkB5D,EAAQS,GACjC+W,EAAaH,IAAgB,GAC7BI,EAAWD,IAAezB,OAAOyB,KAAgBH,IAAgB,GAEvE,IAAKb,EAAW,CACd,QAAoB5U,IAAhBsG,GAA6BmE,IAAc9D,GAC1CxC,GAAM2R,WAAWhG,MAAMmF,GAAMA,EAAE1P,WAAaA,IAI/C,YAHArB,EAAQkH,aAAa,CACnBpN,OAAQmG,EAAKjH,GAAIe,WAAUwM,YAAW5L,UAI1C,IAAKgX,EAIH,kBA+1CN5V,eACE7B,EACA8F,EACAqB,EACAtH,EACA8X,EACApP,EACAL,EACAD,GAEA,QAAA2P,EAAAxX,UAAAC,OAAAwX,EAAA,IAAAtX,MAAAqX,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAA1X,UAAA0X,GAAA,IADIrX,GAAQC,EAAAA,EAAAA,OAAkBmX,EAE9B7X,GAASoC,EAAAA,EAAAA,MACT,MAAMuB,GAAcC,EAAAA,EAAAA,KAAkB5D,EAAQS,GAG9C,QAAoBmB,IAAhBsG,IAA8BD,EAAQ,CACxC,MAAMJ,QAAYN,EAAqBvH,EAAQ8F,EAASqB,EAAU1G,GAElE,IAAKkD,IAAgBkE,EAAK,OAS1B,YAPA/B,EAAQwC,cAAc,CACpBT,MACAjI,OAAQ+D,EAAY7E,GACpByJ,WAAYL,EACZzH,SAIJ,CAEA,MAAMsX,EAAgBpU,GAAa+T,WAAWhG,MAAMmF,GAAMA,EAAE1P,WAAaA,IAEpE4Q,GAEHjS,EAAQyD,SAAS,CAAEzK,GAAIwO,EAAAA,IAAa7M,UAGtC,MAAMsF,QAAamB,EAAoBlH,EAAQmH,GAC1CpB,GASD4R,EACF7R,EAAQkH,aAAa,CACnBpN,OAAQmG,EAAKjH,GAAIe,WAAUwM,UAAWsL,EAAelX,UAE7CsX,GACVjS,EAAQkS,WAAW,CAAEpY,OAAQmG,EAAKjH,GAAIe,SAAUA,GAAY0F,EAAAA,GAAgB9E,UAG1E8H,GACFzC,EAAQmS,SAAS,CAAEC,MAAOnS,EAAKjH,GAAIqZ,MAAO5P,IAGxCN,GAEFD,EADAhI,GAASoC,EAAAA,EAAAA,MACsB0D,EAASC,EAAKjH,GAAImJ,EAAQC,EAAazH,IAtBjEsX,IACHjS,EAAQqG,iBAAiB,CAAE1L,UAC3BqF,EAAQgC,iBAAiB,CAAEvF,QAAS,sBAAuB9B,UAsBjE,CAj6CYoT,CACJ7T,EAAQ8F,EAASqB,EAAUtH,EAAUwM,EAAW9D,EAAYL,EAAaD,EAAQxH,EAIvF,CAEA,MAAM2X,GAAe/Q,EAAAA,EAAAA,KAAqBrH,EAAQmH,GAClD,GAAIqP,GAAanK,GAAa+L,EAQ5B,YAPAtS,EAAQkS,WAAW,CACjB5M,YAAY,EACZI,gBAAiB4M,EAAatZ,GAC9B2M,gBAAiBY,EACjB5L,QACA4K,eAAgBmL,IAKfiB,GAAU3R,EAAQyD,SAAS,CAAEzK,GAAIwO,EAAAA,IAAa7M,UAEnD,MAAM4X,QAAuBnR,EAAoBlH,EAAQmH,GAEzD,GAAKkR,EAEL,GAAIZ,GAAYY,EAAhB,CACE,MAAMC,GAAQC,EAAAA,EAAAA,MAEdzS,EAAQ0S,kBAAkB,CACxBC,QAASjB,EACTU,MAAOG,EAAevZ,GACtB2B,QACA2W,WACAkB,SAGJ,MAEKjM,GAELvG,EAAQkS,WAAW,CACjB5M,YAAY,EACZI,gBAAiB6M,EAAevZ,GAChC2M,gBAAiBY,EACjB5L,QACA4K,eAAgBmL,GAChB,KAGJhN,EAAAA,EAAAA,IAAiB,0BAA0B3H,MAAO7B,EAAQ8F,EAAS4E,KACjE,MAAM,OACJ9K,EAAM,UAAE8Y,EAAS,MACjBjY,GAAQC,EAAAA,EAAAA,OACNgK,EAEE3E,QAAayC,EAAmBxI,EAAQ8F,EAASlG,EAAQa,GAC1DsF,IAIL/F,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQ+F,EAAKjH,GAAI,CAAE8Z,mBAAoBF,KACnE9S,EAAAA,EAAAA,IAAU5F,IAELF,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEiG,OAAM2S,cAAY,KAG7DlP,EAAAA,EAAAA,IAAiB,iCAAiC,CAACxJ,EAAQ8F,EAAS4E,KAClE,MAAM,OAAE9K,EAAM,aAAEiZ,GAAiBnO,EAC3B3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAE3BmG,IAIAjG,EAAAA,EAAAA,IAAQ,gCAAiC,CAAEiG,OAAM8S,gBAAe,KAGvErP,EAAAA,EAAAA,IAAiB,gCAAgC3H,MAAO7B,EAAQ8F,EAAS4E,KACvE,MAAM,OACJ9K,EAAM,OAAEkQ,EAAM,aAAE+I,EAAY,MAC5BpY,GAAQC,EAAAA,EAAAA,OACNgK,EAEEzH,GAAO0E,EAAAA,EAAAA,KAAW3H,EAAQ8P,GAEhC,IAAK7M,EACH,OAGF,MAAM8C,QAAayC,EAAmBxI,EAAQ8F,EAASlG,EAAQa,GAE/D,IAAKsF,EAAM,aAELjG,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEiG,OAAM9C,OAAM4V,iBAE5D7Y,GAASoC,EAAAA,EAAAA,MAET,MAAM0W,GAAkBC,EAAAA,EAAAA,KAAmB/Y,EAAQ+F,EAAKjH,IACxD,IAAKga,EACH,OAGF,MAAM,QAAEE,EAAO,cAAEC,GAAkBH,EAE7BI,EAAWjP,QAAQ4O,EAAaM,cAChCC,GAAenY,OAAOgE,KAAK4T,GAAcxY,OAE/CL,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQ+F,EAAKjH,GAAI,IACvCka,GAAWE,GAAY,CACzBF,QAASA,EAAQhP,QAAQqP,GAAMA,EAAEvJ,SAAWA,QAE1CkJ,IAAYE,GAAY,CAC1BF,QAASA,EAAQlP,KAAKuP,GACpBA,EAAEvJ,SAAWA,EACT,IAAKuJ,EAAGR,gBACRQ,QAGJD,GAAeH,GAAiB,CAClCA,cAAeA,EAAcjP,QAAQqP,GAAMA,EAAEvJ,SAAWA,QAG5DlK,EAAAA,EAAAA,IAAU5F,EAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAO7B,EAAQ8F,EAAS4E,KAC1D,MAAM,OACJ9K,EAAM,OAAEkQ,EAAM,YAAEwJ,EAAW,YAAEC,EAAW,MACxC9Y,GAAQC,EAAAA,EAAAA,OACNgK,EAEEzH,GAAO0E,EAAAA,EAAAA,KAAW3H,EAAQ8P,GAChC,IAAK7M,EACH,OAGF,MAAM8C,QAAayC,EAAmBxI,EAAQ8F,EAASlG,EAAQa,GAE/D,IAAKsF,EAAM,aAELjG,EAAAA,EAAAA,IAAQ,kBAAmB,CAC/BiG,OAAM9C,OAAMqW,cAAaC,gBAG3B,MAAMC,QAAwB1Z,EAAAA,EAAAA,IAAQ,gBAAiBiG,GACvD,IAAKyT,GAAiBrT,SACpB,OAGF,MAAM,iBAAEsT,GAAqBD,EAAgBrT,SACvCuT,GAAezY,OAAOgE,KAAKqU,GAAajZ,OAC9C,IAAIsZ,EACJ,GAAIF,EACF,GAAIC,EAAa,CACf,MAAQ,CAAC5J,GAAS8J,KAAWC,GAASJ,EACtCE,EAAsBE,CACxB,MACEF,EAAsB,IACjBF,EACH,CAAC3J,GAAS,IACL2J,EAAiB3J,GACpBwJ,cACAC,gBAMJI,IACF3Z,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQ+F,EAAKjH,GAAI,CAAE2a,iBAAkBE,KACjE/T,EAAAA,EAAAA,IAAU5F,GACZ,KAGFwJ,EAAAA,EAAAA,IAAiB,cAAc3H,MAAO7B,EAAQ8F,EAAS4E,KACrD,MAAM,OACJ9K,EAAM,MAAEmP,EAAK,MAAEC,EAAK,MAAEC,EAAK,MAAExO,GAAQC,EAAAA,EAAAA,OACnCgK,EAEE3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC1BuG,GAAW4S,EAAAA,EAAAA,KAAmB/Y,EAAQJ,GACvCmG,IAIL/F,GAASoC,EAAAA,EAAAA,MACTpC,GAAS8Z,EAAAA,EAAAA,IAAyB9Z,EAAQ+Z,EAAAA,GAAmBvK,WAAY/O,IACzEmF,EAAAA,EAAAA,IAAU5F,SAEJga,QAAQC,IAAI,CAChBlU,EAAKgJ,QAAUA,GACXjP,EAAAA,EAAAA,IAAQ,kBAAmBiG,EAAMgJ,QACjCnN,EACJuE,GAAU6I,QAAUA,GAChBlP,EAAAA,EAAAA,IAAQ,kBAAmBiG,EAAMiJ,QACjCpN,EACJqN,GACInP,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEF,SAAQZ,WAAY+G,EAAK/G,WAAYiQ,eAChErN,IAGN5B,GAASoC,EAAAA,EAAAA,MACTpC,GAAS8Z,EAAAA,EAAAA,IAAyB9Z,EAAQ+Z,EAAAA,GAAmBnK,SAAUnP,IACvEmF,EAAAA,EAAAA,IAAU5F,GAENiP,GACFnJ,EAAQD,aAAa,CAAEjG,SAAQa,QAAO6N,YAAY,IACpD,KAGF9E,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAO7B,EAAQ8F,EAAS4E,KAC1D,MAAM,MAAEuE,EAAK,OAAErP,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,EAC/C3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,IACL/F,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQJ,EAAQ,CAAEsa,gBAAYtY,IAClD5B,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQJ,EAAQ,CAAEua,kBAAcvY,KAC5DgE,EAAAA,EAAAA,IAAU5F,SAEJF,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BF,SACAZ,WAAY+G,EAAK/G,WACjBiQ,gBAGInP,EAAAA,EAAAA,IAAQ,sBAAuB,CAACmP,IACtCnJ,EAAQD,aAAa,CAAEjG,SAAQa,QAAO6N,YAAY,IAAO,KAG3D9E,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAO7B,EAAQ8F,EAAS4E,KAC1D,MAAM,MAAEuE,EAAK,OAAErP,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,EAC/C3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EAAM,OACX,MAAMqU,EAAiB,CAACnL,GACxB,GAAIlJ,EAAKmU,aAAejL,EAAMnQ,GAAI,CAEhC,MAAMub,EAAYtU,EAAKuU,SAAS,GAC5BD,GACFD,EAAejW,KAAKkW,GAEtBra,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQJ,EAAQ,CAAEsa,gBAAYtY,IAClD5B,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQJ,EAAQ,CAAEua,kBAAcvY,KAC5DgE,EAAAA,EAAAA,IAAU5F,SAEJF,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BF,SACAZ,WAAY+G,EAAK/G,WACjBiQ,MAAOoL,GAEX,CAEA,MAAM,OAAEC,EAAS,IAAOvU,EAElBwU,EAAYD,EAAOtQ,QAAQwQ,GAAMJ,EAAe1I,MAAM+I,GAAaA,EAAS3b,KAAO0b,EAAE1b,OAC3FkB,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQJ,EAAQ,CAAE0a,OAAQC,KAE9C3U,EAAAA,EAAAA,IAAU5F,SAGWF,EAAAA,EAAAA,IAAQ,sBAAuBsa,IAEpDtU,EAAQD,aAAa,CAAEjG,SAAQa,QAAO6N,YAAY,GAAO,KAG3D9E,EAAAA,EAAAA,IAAiB,oBAAoB,CAACxJ,EAAQ8F,EAAS4E,KACrD,MAAM,OAAE9K,EAAM,UAAE8Y,GAAchO,EACxB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAE3BmG,IAIAjG,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEiG,OAAM2S,aAAY,KAGvDlP,EAAAA,EAAAA,IAAiB,2BAA2B3H,UAC1C,MAAM6Y,QAAe5a,EAAAA,EAAAA,IAAQ,4BAC7B,IAAK4a,EACH,OAGF,MAAMC,EAAYD,EAAOtZ,QAAO,CAACoB,EAAQoY,KACnCA,IAAUA,EAAMjP,UAClBnJ,EAAOoY,EAAM9b,IAAM8b,GAGdpY,IACN,CAAC,GAEJxC,GAASoC,EAAAA,EAAAA,MACTpC,GAASsM,EAAAA,EAAAA,IAAStM,EAAQ2a,GAC1B3a,EAAS,IACJA,EACHqD,MAAO,IACFrD,EAAOqD,MACVwX,iBAAkB5Z,OAAOgE,KAAK0V,MAGlC/U,EAAAA,EAAAA,IAAU5F,EAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,uBAAuB3H,MAAO7B,EAAQ8F,EAAS4E,KAC9D,MAAM,UAAEiF,EAAS,OAAE/P,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,GAAW,CAAC,EAE/D+E,GAAUtM,EAAAA,EAAAA,KAAWnD,EAAQ2P,GACnC,IAAKF,EACH,OAGF,MAAM1J,QAAayC,EAAmBxI,EAAQ8F,EAASlG,EAAQa,GAE/D,IAAKsF,EAAM,OAEX,IAAII,GAAW4S,EAAAA,EAAAA,KAAmB/Y,EAAQ+F,EAAKjH,IAC/C,IAAKqH,EAAU,CACb,MAAM2U,QAAiBhb,EAAAA,EAAAA,IAAQ,gBAAiBiG,GAChD,IAAK+U,EACH,OAGF3U,EAAW2U,EAAS3U,QACtB,CAEIA,EAAUyS,qBACZ5Y,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQ+F,EAAKjH,GAAI,CAAE8Z,oBAAoB,KACnEhT,EAAAA,EAAAA,IAAU5F,SAEJF,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEiG,OAAM2S,WAAW,MAGxD5Y,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE2P,UAAS1J,QAAO,KAGvDyD,EAAAA,EAAAA,IAAiB,yBAAyB3H,MAAO7B,EAAQ8F,EAAS4E,KAChE,MAAM,UAAEiF,EAAS,MAAElP,GAAQC,EAAAA,EAAAA,OAAsBgK,EAE3C+E,GAAUtM,EAAAA,EAAAA,KAAWnD,EAAQ2P,GACnC,IAAKF,EACH,OAGF,MAAMtJ,GAAW4S,EAAAA,EAAAA,KAAmB/Y,EAAQ2P,GAC5C,IAAI5J,EACAI,GAAUiH,eACZrH,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQmG,EAASiH,qBAG/BtN,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE2P,YAClC1J,GAEFF,EADA7F,GAASoC,EAAAA,EAAAA,MACY0D,EAASC,EAAMtF,EACtC,KAGF+I,EAAAA,EAAAA,IAAiB,uBAAuB,CAACxJ,EAAQ8F,EAAS4E,KACxD,MAAM,iBAAEqQ,EAAgB,MAAEta,GAAQC,EAAAA,EAAAA,OAAsBgK,EAKxD,KAFkBqQ,EAAmB,GAFlB1K,EAAAA,EAAAA,GAAmBrQ,EAAQ,kBAY9C,OAAO+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC5B+a,oBACCta,GATDqF,EAAQoD,sBAAsB,CAC5BzG,MAAO,gBACPhC,SAOK,KAGX+I,EAAAA,EAAAA,IAAiB,0BAA0B,CAACxJ,EAAQ8F,EAAS4E,KAC3D,MAAM,MAAEjK,GAAQC,EAAAA,EAAAA,OAAsBgK,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAe/L,EAAQ,CAC5Bgb,oBAAgBpZ,GACfnB,EAAM,KAGX+I,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAO7B,EAAQ8F,EAAS4E,KAC1D,MAAM,MAAEjK,GAAQC,EAAAA,EAAAA,OAAsBgK,GAAW,CAAC,GAC5C,OAAE9K,IAAWgB,EAAAA,EAAAA,KAAyBZ,EAAQS,IAAU,CAAC,EACzDsF,EAAOnG,GAASuD,EAAAA,EAAAA,KAAWnD,EAAQJ,QAAUgC,EACnD,IAAKmE,IAAQ6C,EAAAA,EAAAA,IAAiB7C,GAC5B,OAGF,MAAMkV,GAASlC,EAAAA,EAAAA,KAAmB/Y,EAAQ+F,EAAKjH,KAAKka,SAAS3Y,OAC7D,QAAeuB,IAAXqZ,QAA8CrZ,IAAtBmE,EAAKM,cAA8B4U,GAAUlV,EAAKM,aAAc,OAE5F,MAAM7D,QAAe1C,EAAAA,EAAAA,IAAQ,eAAgBiG,EAAKjH,GAAIiH,EAAK/G,WAAa,SAAUic,GAClF,IAAKzY,EACH,OAGF,MAAM,QAAEwW,EAAO,MAAE/U,EAAK,iBAAEO,GAAqBhC,EACxCwW,GAAYA,EAAQ3Y,SAIzBL,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqBJ,EAAO,OACtDjE,GAAS4E,EAAAA,EAAAA,IAAgB5E,EAAQwE,GACjCxE,GAASkb,EAAAA,EAAAA,IAAelb,EAAQ+F,EAAMiT,IACtCpT,EAAAA,EAAAA,IAAU5F,GAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,kBAAkB3H,MAAO7B,EAAQ8F,EAAS4E,KACzD,MAAM,OAAE9K,EAAM,UAAEsP,EAAS,MAAEzO,GAAQC,EAAAA,EAAAA,OAAsBgK,EACnD3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC1BqE,EAASiL,EAAuBpF,KAAKgG,IAAWnI,EAAAA,EAAAA,KAAW3H,EAAQ8P,KAAS9F,OAAOC,SAEzF,IAAKlE,IAAS9B,EAAM5D,OAClB,OAGFyF,EAAQqV,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAuBC,QAAS7a,UAC/F,MAAM2O,QAA0BtP,EAAAA,EAAAA,IAAQ,iBAAkBiG,EAAM9B,GAC5DmL,IACFpP,GAASoC,EAAAA,EAAAA,MACTpC,GAAS6P,EAAAA,EAAAA,IAA+B7P,EAAQoP,EAAmBrJ,EAAKjH,GAAI2B,IAC5EmF,EAAAA,EAAAA,IAAU5F,IAEZ8F,EAAQqV,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAuBE,OAAQ9a,UAE9FoF,EADA7F,GAASoC,EAAAA,EAAAA,MACY0D,EAASC,EAAMtF,EAAM,KAG5C+I,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAO7B,EAAQ8F,EAAS4E,KAC3D,MAAM,OAAE9K,EAAM,OAAEkQ,EAAM,MAAErP,GAAQC,EAAAA,EAAAA,OAAsBgK,EAChD3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC1BqD,GAAO0E,EAAAA,EAAAA,KAAW3H,EAAQ8P,GAE3B/J,GAAS9C,UAIRnD,EAAAA,EAAAA,IAAQ,mBAAoBiG,EAAM9C,GAExC4C,EADA7F,GAASoC,EAAAA,EAAAA,MACY0D,EAASC,EAAMtF,GAAM,KAG5C+I,EAAAA,EAAAA,IAAiB,qBAAqB,CAACxJ,EAAQ8F,EAAS4E,KACtD,MAAM,OAAE9K,EAAM,YAAE4b,GAAgB9Q,EAC1B3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAE3BmG,IAIAjG,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEiG,OAAMyV,eAAc,KAG1DhS,EAAAA,EAAAA,IAAiB,2BAA2B3H,MAAO7B,EAAQ8F,EAAS4E,KAClE,MAAM,OAAE9K,EAAM,iBAAE6b,EAAgB,MAAEhb,GAAQC,EAAAA,EAAAA,OAAsBgK,EAC1D3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,UAECjG,EAAAA,EAAAA,IAAQ,0BAA2B,CACvCiG,OACA0V,qBAIG5V,EADL7F,GAASoC,EAAAA,EAAAA,MACiB0D,EAASC,EAAMtF,GAAM,KAGjD+I,EAAAA,EAAAA,IAAiB,aAAa,CAACxJ,EAAQ8F,EAAS4E,KAC9C,MAAM,OAAE9K,GAAW8K,EAGnB,KAFavH,EAAAA,EAAAA,KAAWnD,EAAQJ,GAMhC,GAAIA,IAAWI,EAAOgE,eACflE,EAAAA,EAAAA,IAAQ,YAAa,CAAEb,KAAM,aAC7B,CACL,MAAMgE,GAAO0E,EAAAA,EAAAA,KAAW3H,EAAQJ,GAC5BqD,IACGnD,EAAAA,EAAAA,IAAQ,YAAa,CAAEb,KAAM,OAAQgE,QAE9C,MAGFuG,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAO7B,EAAQ8F,EAAS4E,KAC3D,MAAM,OAAE9K,GAAW8K,EACb3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EAAM,OAEX,MAAMvD,QAAe1C,EAAAA,EAAAA,IAAQ,oBAAqBiG,GAClD,IAAKvD,EAAQ,OACb,MAAM,SAAEkZ,EAAQ,MAAEzX,GAAUzB,EAC5BxC,GAASoC,EAAAA,EAAAA,MAETpC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqBJ,EAAO,OAEtDjE,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQ+F,EAAKjH,GAAI,CAAE4c,cACvC9V,EAAAA,EAAAA,IAAU5F,EAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAO7B,EAAQ8F,EAAS4E,KAC3D,MAAM,OAAE9K,EAAM,UAAE8Y,GAAchO,EACxB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,KACA4V,EAAAA,EAAAA,IAAiB5V,KAAUuR,EAAAA,EAAAA,IAAcvR,WAExCjG,EAAAA,EAAAA,IAAQ,mBAAoBiG,EAAM2S,EAAU,KAGpDlP,EAAAA,EAAAA,IAAiB,qBAAqB3H,MAAO7B,EAAQ8F,EAAS4E,KAC5D,MAAM,OAAE9K,EAAM,UAAE8Y,GAAchO,EACxB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,KACA4V,EAAAA,EAAAA,IAAiB5V,KAAUuR,EAAAA,EAAAA,IAAcvR,WAExCjG,EAAAA,EAAAA,IAAQ,oBAAqBiG,EAAM2S,EAAU,KAGrDlP,EAAAA,EAAAA,IAAiB,kBAAkB,CAACxJ,EAAQ8F,EAAS4E,KACnD,MAAM,OAAE9K,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,EAG9C,OAFA5E,EAAQ8V,kBAAkB,CAAEC,SAAS,EAAOpb,UAC5CqF,EAAQ8V,kBAAkB,CAAEC,SAAS,EAAOC,YAAY,EAAMrb,WACvDsL,EAAAA,EAAAA,GAAe/L,EAAQ,CAC5B+b,iBAAkBnc,GACjBa,EAAM,KAGX+I,EAAAA,EAAAA,IAAiB,mBAAmB,CAACxJ,EAAQ8F,EAAS4E,KACpD,MAAM,MAAEjK,GAAQC,EAAAA,EAAAA,OAAsBgK,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAe/L,EAAQ,CAC5B+b,sBAAkBna,GACjBnB,EAAM,KAGX+I,EAAAA,EAAAA,IAAiB,8BAA8B3H,MAAO7B,EAAQ8F,EAAS4E,KACrE,MAAM,SACJvD,EAAQ,OAAE6C,EAAM,WAAEzB,EAAU,MAAE9H,GAAQC,EAAAA,EAAAA,OACpCgK,EACE7C,QAAYN,EAAqBvH,EAAQ8F,EAASqB,EAAU1G,GAClE,IAAKoH,EAAK,OAIV,IAFkBoC,QAAQD,GASxB,YANAlE,EAAQwC,cAAc,CACpB0T,gBAAgB,EAChBnU,MACAU,aACA9H,UAKJT,GAASoC,EAAAA,EAAAA,MACT,MAAQ6Z,YAAY,KAAEC,IAAWlc,EACjC,IAAKkc,EAAKrU,EAAI/I,IAeZ,OAdAkB,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9Bmc,0BAA2B,CACzBtU,MACAuU,UAAW,CACTC,OAAQ,yBACR3R,QAAS,CACP7C,MACAmC,SACAzB,iBAIL9H,QACHmF,EAAAA,EAAAA,IAAU5F,GAGZ8F,EAAQwW,uBAAuB,CAC7BzU,MACAmC,SACAzB,aACA9H,SACA,KAGJ+I,EAAAA,EAAAA,IAAiB,cAAc3H,MAAO7B,EAAQ8F,EAAS4E,KACrD,MAAM,OAAE9K,EAAM,MAAEyO,GAAU3D,EACpB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EAAM,OAEX,IAAKsI,GAAStI,EAAKwW,gBAAkBxW,EAAKwW,eAAelc,SAAW0F,EAAKyW,YACvE,OAGF,MAAMC,GAAepO,GAAStI,EAAKwW,eAAiBxW,EAAKwW,eAAenb,QAAO,CAACsb,EAAKC,KACnF,MAAMC,EAAQ7W,EAAK6M,SAAS+J,GACtBE,EAAW9W,EAAK6M,SAAS8J,GAC/B,OAAKE,KACAC,GAAYD,EAAM/J,cAAgBgK,EAAShK,eACvC8J,EAFUD,CAIT,SACP9a,GAEG9C,GAAIge,EAAerP,KAAMxL,EAAY4Q,cAAe7Q,GAAcya,GACrE1W,EAAK6M,SAAS6J,IAAiB,CAAC,EAC/Bja,QAAe1C,EAAAA,EAAAA,IAAQ,cAAe,CAC1CiG,OAAM+W,gBAAe9a,WAAUC,aAAYQ,MAAOqa,EAAgBC,EAAAA,IAAeC,EAAAA,MAG9Exa,IAELxC,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAASsM,EAAAA,EAAAA,IAAStM,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,OAC7DrD,GAASuM,EAAAA,EAAAA,IAAYvM,EAAQwC,EAAOgK,UACpCxM,GAASid,EAAAA,EAAAA,IAAajd,EAAQJ,EAAQ4C,EAAO0a,MAAO1a,EAAOoQ,QAC3D5S,GAASmd,EAAAA,EAAAA,IAAqBnd,EAAQJ,EAAQ4C,EAAOoQ,OAAO9I,KAAK8S,GAAUA,EAAM9d,MACjFmC,OAAOmc,QAAQ5a,EAAO0C,YAAc,CAAC,GAAGC,SAAQkY,IAAuB,IAArBxd,EAAUuF,GAAMiY,EAChErd,GAAS0F,EAAAA,EAAAA,IAAmB1F,EAAQJ,EAAQmW,OAAOlW,GAAW,QAASuF,EAAM,IAE/EnE,OAAOmc,QAAQ5a,EAAO8a,6BAA+B,CAAC,GAAGnY,SAAQoY,IAA0B,IAAxB1O,EAASxC,GAAUkR,EACpFvd,GAASyM,EAAAA,EAAAA,IAAiBzM,EAAQJ,EAAQmW,OAAOlH,GAAU,CAAEiE,uBAAwBzG,GAAY,KAGnGzG,EAAAA,EAAAA,IAAU5F,GAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAO7B,EAAQ8F,EAAS4E,KACxD,MAAM,OAAE9K,EAAM,QAAEiP,GAAYnE,EAEtB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EAAM,OAEX,MAAMvD,QAAe1C,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEiG,OAAM8I,YAEvD,GAAKrM,EAQLxC,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAASsM,EAAAA,EAAAA,IAAStM,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,OAC7DrD,GAASuM,EAAAA,EAAAA,IAAYvM,EAAQwC,EAAOgK,UACpCxM,GAAS8O,EAAAA,EAAAA,IAAY9O,EAAQJ,EAAQiP,EAASrM,EAAOoa,QAErDhX,EAAAA,EAAAA,IAAU5F,QAbR,GAAI,UAAW0K,GAAWA,EAAQ8S,uBAAwB,CACxD,MAAM,MAAE/c,GAAQC,EAAAA,EAAAA,OAAsBgK,EACtC5E,EAAQyD,SAAS,CAAEzK,QAAI8C,EAAWnB,SACpC,CAUe,KAGnB+I,EAAAA,EAAAA,IAAiB,eAAe3H,MAAO7B,EAAQ8F,EAAS4E,KACtD,MAAM,OAAE9K,EAAM,UAAE8Y,EAAS,MAAEjY,GAAQC,EAAAA,EAAAA,OAAsBgK,EAEnD3E,QAAayC,EAAmBxI,EAAQ8F,EAASlG,EAAQa,GAC/D,IAAKsF,EACH,OAGF,IAAIvD,EACJ,IACEA,QAAe1C,EAAAA,EAAAA,IAAQ,cAAe,CAAEiG,OAAM2S,aAChD,CAAE,MAAOzP,GACFA,EAAmB1G,QAAQiS,WAAW,aACzC1O,EAAQgC,iBAAiB,CAAEvF,QAASwF,EAAAA,GAAuB,aAActH,UAEzEqF,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5I,SAE9E,CAEI+B,IACFxC,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2G,EAAAA,EAAAA,IAAW3G,EAAQ+F,EAAKjH,GAAI,CAAE6M,QAAS+M,KAChD9S,EAAAA,EAAAA,IAAU5F,GAEL0Y,EAGH5S,EAAQ2X,eAAe,CAAE7d,OAAQmG,EAAKjH,GAAI2B,UAF1CqF,EAAQ4X,gBAAgB,CAAEjd,UAI9B,KAGF+I,EAAAA,EAAAA,IAAiB,4BAA4B3H,MAAO7B,EAAQ8F,EAAS4E,KACnE,MAAM,OAAE9K,EAAM,UAAE8Y,GAAchO,EACxB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EACH,OAGF,MAAM4X,GAAgB5E,EAAAA,EAAAA,KAAmB/Y,EAAQ+F,EAAKjH,KAAK8e,sBAC3D5d,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQJ,EAAQ,CAAEge,sBAAuBlF,KACrE9S,EAAAA,EAAAA,IAAU5F,SAEWF,EAAAA,EAAAA,IAAQ,2BAA4B,CAAEiG,OAAM2S,oBAEhC9W,IAAlB+b,IACb3d,GAASoC,EAAAA,EAAAA,MACTpC,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQJ,EAAQ,CAAEge,sBAAuBD,KACrE/X,EAAAA,EAAAA,IAAU5F,GACZ,KAGFwJ,EAAAA,EAAAA,IAAiB,eAAe3H,MAAO7B,EAAQ8F,EAAS4E,KACtD,MAAM,OACJ9K,EAAM,MAAEmP,EAAK,UAAE8O,EAAS,YAAEC,EAAW,MACrCrd,GAAQC,EAAAA,EAAAA,OACNgK,EACE3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EAAM,QAEPkG,EAAAA,EAAAA,KAAejM,EAAQS,GAAOsd,mBAChC/d,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9B+d,iBAAkB,CAChBne,SACAoe,WAAW,IAEZvd,IACHmF,EAAAA,EAAAA,IAAU5F,IAGZ,MAAM6O,QAAgB/O,EAAAA,EAAAA,IAAQ,cAAe,CAC3CiG,OAAMgJ,QAAO8O,YAAWC,gBAEtBjP,GACF/I,EAAQkS,WAAW,CACjBpY,SAAQC,SAAUgP,EAASjE,sBAAsB,EAAMnK,UAG3DqF,EAAQmY,sBAAsB,CAAExd,SAAQ,KAG1C+I,EAAAA,EAAAA,IAAiB,eAAe3H,MAAO7B,EAAQ8F,EAAS4E,KACtD,MAAM,OAAE9K,EAAM,QAAEiP,GAAYnE,EACtB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,SAEgBjG,EAAAA,EAAAA,IAAQ,cAAe,CAAEiG,OAAM8I,cAIpD7O,GAASoC,EAAAA,EAAAA,MACTpC,GAASke,EAAAA,EAAAA,IAAYle,EAAQJ,EAAQiP,IACrCjJ,EAAAA,EAAAA,IAAU5F,GAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,aAAa3H,MAAO7B,EAAQ8F,EAAS4E,KACpD,MAAM,OACJ9K,EAAM,QAAEiP,EAAO,MAAEpO,GAAQC,EAAAA,EAAAA,SAAsBmZ,GAC7CnP,EACE3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC1Bgd,EAAQ7W,GAAM6M,SAAS/D,GACxB9I,GAAS6W,KAEV3Q,EAAAA,EAAAA,KAAejM,EAAQS,GAAO0d,iBAChCne,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9Bme,eAAgB,CACdve,SACAiP,UACAmP,WAAW,IAEZvd,IACHmF,EAAAA,EAAAA,IAAU5F,UAGSF,EAAAA,EAAAA,IAAQ,YAAa,CAAEiG,OAAM8I,aAAYgL,MAG9D7Z,GAASoC,EAAAA,EAAAA,MACTpC,GAAS8O,EAAAA,EAAAA,IAAY9O,EAAQJ,EAAQiP,EAASgL,IAC9CjU,EAAAA,EAAAA,IAAU5F,GAEV8F,EAAQsY,oBAAoB,CAAE3d,WAAQ,KAGxC+I,EAAAA,EAAAA,IAAiB,qBAAqB,CAACxJ,EAAQ8F,EAAS4E,KACtD,MAAM,OACJ9K,EAAM,QAAEiP,EAAO,SAAEmC,EAAQ,MAAEvQ,GAAQC,EAAAA,EAAAA,OACjCgK,GAEE,kBAAE2T,GAAsBre,EAAOse,WAAa,CAAC,EAC7CvY,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,GAASA,EAAK6M,QAAWyL,IAE1BrN,GAAY/P,OAAOC,OAAO6E,EAAK6M,QAAQ5I,QAAQ4S,GAAUA,EAAM5L,WAAU3Q,QAAUge,EACrFvY,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,2BAA4BsW,EAAmB,KAC/E5d,WAKCX,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEiG,OAAM8I,UAASmC,aAAW,KAGhExH,EAAAA,EAAAA,IAAiB,uBAAuB3H,MAAO7B,EAAQ8F,EAAS4E,KAC9D,MAAM,KAAE4L,EAAI,MAAE7V,GAAQC,EAAAA,EAAAA,OAAsBgK,EAEtClI,QAAe1C,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEwW,SACjD9T,GAQLxC,GAASoC,EAAAA,EAAAA,MAETpC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAASsM,EAAAA,EAAAA,IAAStM,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,OAE7DrD,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9Bue,cAAe,CACbC,OAAQhc,EAAOgc,SAEhB/d,IAEHmF,EAAAA,EAAAA,IAAU5F,IAlBR8F,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,6BAChCtH,SAgBa,KAGnB+I,EAAAA,EAAAA,IAAiB,sBAAsB3H,MAAO7B,EAAQ8F,EAAS4E,KAC7D,MAAM,OAAE8T,EAAM,QAAEC,EAAO,MAAEhe,GAAQC,EAAAA,EAAAA,OAAsBgK,EAEjDgU,EAAQD,EAAQ3U,KAAK6U,IAAWxb,EAAAA,EAAAA,KAAWnD,EAAQ2e,KAAS3U,OAAOC,SACnE2U,EAAiBF,EAAM1U,QAAQ6U,GAASA,EAAKC,cAAaze,OAE1DiQ,EAAS,aAAckO,GAASjO,EAAAA,EAAAA,KAAiBvQ,EAAQwe,EAAOpO,eAAYxO,EAC5Emd,EAAc,UAAWP,EAASA,EAAOzP,MAAQuB,GAAQvB,MAE/D,IAEE,UADqBjP,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEwW,KAAMkI,EAAOlI,KAAMoI,UAC3D,OAEb5Y,EAAQgC,iBAAiB,CACvBiH,MAAOhH,EAAAA,GAAuBuI,EAAS,yBAA2B,uBAAwByO,GAC1Fxc,QAASwF,EAAAA,GAAuB,0BAA2B6W,EAAgB,KAC3Ene,SAEJ,CAAE,MAAOwI,GAC6B,uBAA/BA,EAAmB1G,QACtBuD,EAAQoD,sBAAsB,CAAEzG,MAAO,iBAAkBhC,UAEzDqF,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5I,SAE9E,MAGF+I,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAO7B,EAAQ8F,EAAS4E,KACxD,MAAM,SAAE0F,EAAQ,QAAEqO,EAAO,MAAEhe,GAAQC,EAAAA,EAAAA,OAAsBgK,EAEnD4F,GAASC,EAAAA,EAAAA,KAAiBvQ,EAAQoQ,GAElCsO,EAAQD,GAAS3U,KAAK6U,IAAWxb,EAAAA,EAAAA,KAAWnD,EAAQ2e,KAAS3U,OAAOC,UAAY,SAEjEnK,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEsQ,WAAUsO,WAI1D5Y,EAAQgC,iBAAiB,CACvBiH,MAAOhH,EAAAA,GAAuB,yBAA0BuI,EAAOvB,OAC/DxM,QAASwF,EAAAA,GAAuB,4BAA6B2W,EAAMre,OAAQ,KAC3EI,SACA,KAGJ+I,EAAAA,EAAAA,IAAiB,uBAAuB3H,MAAO7B,EAAQ8F,EAAS4E,KAC9D,MAAM,SAAE0F,GAAa1F,EAEflI,QAAe1C,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEsQ,aAElD5N,IAELxC,GAASoC,EAAAA,EAAAA,MAETpC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAASsM,EAAAA,EAAAA,IAAStM,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,OAC7DrD,EAAS,IACJA,EACHqR,YAAa,IACRrR,EAAOqR,YACV2N,QAAS,IACJhf,EAAOqR,YAAY2N,QACtB,CAAC5O,GAAW5N,EAAOwc,YAIzBpZ,EAAAA,EAAAA,IAAU5F,GAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,wBAAwB3H,MAAO7B,EAAQ8F,EAAS4E,KAC/D,MAAM,SAAE0F,EAAQ,MAAE3P,GAAQC,EAAAA,EAAAA,OAAsBgK,EAE1C4F,GAASC,EAAAA,EAAAA,KAAiBvQ,EAAQoQ,GACxC,IAAKE,EAAQ,OAUb,IAAI9N,EARJxC,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9Bif,kBAAmB,KACdhT,EAAAA,EAAAA,KAAejM,EAAQS,GAAOwe,kBACjCjB,WAAW,IAEZvd,IACHmF,EAAAA,EAAAA,IAAU5F,GAIV,IACEwC,QAAe1C,EAAAA,EAAAA,IAAQ,sBAAuB,CAC5CsQ,WACAsO,MAAOpO,EAAOI,gBAAgBpM,OAAOgM,EAAOG,eAAiB,IAC1D3G,KAAKlK,IAAWuD,EAAAA,EAAAA,KAAWnD,EAAQJ,KAAW+H,EAAAA,EAAAA,KAAW3H,EAAQJ,KAASoK,OAAOC,UAExF,CAAE,MAAOhB,GACH7J,EAA0BmL,IAAKtB,EAAmB1G,UACpDuD,EAAQoD,sBAAsB,CAAEzG,MAAO,kBAAmBhC,UAC1DqF,EAAQwM,0BAA0B,CAAE4M,OAAQC,EAAAA,GAAgBC,QAAS3e,WAErEqF,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5I,SAE9E,CAEA,IAAK+B,IAAWA,EAAOgc,OAAQ,OAE/B,MAAM,kBAAES,IAAsBhT,EAAAA,EAAAA,KAAejM,EAAQS,GAEhDwe,IAELjf,GAASoC,EAAAA,EAAAA,MACTpC,EAAS,IACJA,EACHqR,YAAa,IACRrR,EAAOqR,YACVnN,KAAM,IACDlE,EAAOqR,YAAYnN,KACtB,CAACkM,GAAW,IACPpQ,EAAOqR,YAAYnN,KAAKkM,MACxB5N,EAAOwH,SAGdgV,QAAS,IACJhf,EAAOqR,YAAY2N,QACtB,CAAC5O,GAAW,IACNpQ,EAAOqR,YAAY2N,QAAQ5O,IAAa,GAC5C5N,EAAOgc,WAKfxe,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9Bif,kBAAmB,IACdA,EACH7L,IAAK5Q,EAAOgc,OAAOpL,IACnB4K,WAAW,IAEZvd,IACHmF,EAAAA,EAAAA,IAAU5F,GAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,sBAAsB3H,MAAO7B,EAAQ8F,EAAS4E,KAC7D,MAAM,SACJ0F,EAAQ,QAAEqO,EAAO,IAAErL,EAAG,MAAE3S,GAAQC,EAAAA,EAAAA,OAC9BgK,EAEE4L,EAAOlD,EAAI4B,MAAM,KAAKqK,MAC5B,IAAK/I,EAAM,OAEX,MAAMoI,EAAQD,EACX3U,KAAKlK,IAAWuD,EAAAA,EAAAA,KAAWnD,EAAQJ,KAAW+H,EAAAA,EAAAA,KAAW3H,EAAQJ,KAASoK,OAAOC,SAEpFjK,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9Bif,kBAAmB,KACdhT,EAAAA,EAAAA,KAAejM,EAAQS,GAAOwe,kBACjCjB,WAAW,IAEZvd,IACHmF,EAAAA,EAAAA,IAAU5F,GAEV,IACE,MAAMwC,QAAe1C,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEsQ,WAAUkG,OAAMoI,UAErE,IAAKlc,EACH,OAGFxC,GAASoC,EAAAA,EAAAA,MACTpC,EAAS,IACJA,EACHqR,YAAa,IACRrR,EAAOqR,YACV2N,QAAS,IACJhf,EAAOqR,YAAY2N,QACtB,CAAC5O,GAAWpQ,EAAOqR,YAAY2N,QAAQ5O,IAAWtG,KAAK0U,GACjDA,EAAOpL,MAAQA,EACV5Q,EAEFgc,QAKf5Y,EAAAA,EAAAA,IAAU5F,EACZ,CAAE,MAAOiJ,GACPnD,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5I,SAC5E,CAAE,QACAT,GAASoC,EAAAA,EAAAA,MAETpC,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9Bif,kBAAmB,KACdhT,EAAAA,EAAAA,KAAejM,EAAQS,GAAOwe,kBACjCjB,WAAW,IAEZvd,IACHmF,EAAAA,EAAAA,IAAU5F,EACZ,MAGFwJ,EAAAA,EAAAA,IAAiB,wBAAwB3H,MAAO7B,EAAQ8F,EAAS4E,KAC/D,MAAM,SAAE0F,EAAQ,IAAEgD,GAAQ1I,EAEpB4L,EAAOlD,EAAI4B,MAAM,KAAKqK,MAEvB/I,SAEgBxW,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEsQ,WAAUkG,WAIjEtW,GAASoC,EAAAA,EAAAA,MACTpC,EAAS,IACJA,EACHqR,YAAa,IACRrR,EAAOqR,YACV2N,QAAS,IACJhf,EAAOqR,YAAY2N,QACtB,CAAC5O,GAAWpQ,EAAOqR,YAAY2N,QAAQ5O,IAAWpG,QAAQwU,GAAWA,EAAOpL,MAAQA,QAI1FxN,EAAAA,EAAAA,IAAU5F,GAAO,KAGnBwJ,EAAAA,EAAAA,IAAiB,6BAA6B3H,MAAO7B,EAAQ8F,EAAS4E,KACpE,MAAM,SAAE0F,EAAQ,uBAAEkP,EAAsB,MAAE7e,GAAQC,EAAAA,EAAAA,OAAsBgK,EAClE4F,GAASC,EAAAA,EAAAA,KAAiBvQ,EAAQoQ,GACxC,GAAKE,EAAL,CAEA,GAAIA,EAAOiP,cAAgBjP,EAAOkP,cAAgBF,GAAyB,CACzE,MAAMG,QAAoB3f,EAAAA,EAAAA,IAAQ,gCAAiC,CAAEsQ,aAWrE,OAVApQ,GAASoC,EAAAA,EAAAA,MACTpC,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9Bue,cAAe,CACbmB,QAAS,CACPtP,WACAuP,iBAAkBF,KAGrBhf,QACHmF,EAAAA,EAAAA,IAAU5F,EAEZ,CAEAA,GAAS+L,EAAAA,EAAAA,GAAe/L,EAAQ,CAC9B4f,wBAAyBxP,GACxB3P,IAEHmF,EAAAA,EAAAA,IAAU5F,EArBS,CAqBF,KAGnBwJ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACxJ,EAAQ8F,EAAS4E,KAC/D,MAAM,OAAE9K,EAAM,iBAAEigB,GAAqBnV,EAOrC,OALA1K,GAASoC,EAAAA,EAAAA,OACAuE,EAAAA,EAAAA,IAAW3G,EAAQJ,EAAQ,CAClCigB,oBAGW,KAGfrW,EAAAA,EAAAA,IAAiB,0BAA0B3H,MAAO7B,EAAQ8F,EAAS4E,KACjE,MAAM,OAAE9K,EAAM,UAAE8Y,GAAchO,EACxB3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAC3BmG,QAIUnE,UAFM9B,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEiG,OAAM2S,gBAI/D1Y,GAASoC,EAAAA,EAAAA,MACTpC,GAAS8f,EAAAA,EAAAA,IAAmB9f,EAAQJ,EAAQ,CAC1CmgB,uBAAuBrH,QAAY9W,KAErCgE,EAAAA,EAAAA,IAAU5F,GAAO,G,mQCx6EnB,MAAMggB,EAAc,0oBAEpB,IAAIC,EACAC,EACAC,EAKG,SAASC,IAGd,OAFAC,IAEOrG,QAAQC,IAAIhZ,OAAOC,OAAOif,GAAQrW,KAAKwW,IAC5C,MAAMC,EAAUD,EAAME,IAItB,OAHAF,EAAME,IAAMR,EACZM,EAAMG,OAAQ,EACdH,EAAMI,OAAS,KACRJ,EAAMK,OACVC,MAAK,KACJN,EAAM1W,QACN0W,EAAMI,OAAS,EACfJ,EAAMO,YAAc,EACpBP,EAAMG,OAAQ,GAEdK,EAAAA,EAAAA,KAAoB,KAClBR,EAAME,IAAMD,CAAO,GACnB,GACF,IAER,CAEO,SAASF,IACd,GAAIF,EACF,OAEF,MAAMY,EAAY,IAAIC,MAAM,wBACtBC,EAAkB,IAAID,MAAM,8BAClCC,EAAgBC,MAAO,EACvB,MAAMC,EAAa,IAAIH,MAAM,yBACvBI,EAAiB,IAAIJ,MAAM,+BAC3BK,EAAY,IAAIL,MAAM,mBACtBM,EAAe,IAAIN,MAAM,sBACzBO,EAAW,IAAIP,MAAM,kBACrBQ,EAAgB,IAAIR,MAAM,uBAChCQ,EAAcN,MAAO,EACrB,MAAMO,EAAe,IAAIT,MAAM,sBAC/BS,EAAaP,MAAO,EAEpBf,EAAS,CACPuB,KAAMX,EACNY,UAAWP,EACXQ,MAAOT,EACPU,WAAYZ,EACZa,SAAUN,EACVO,IAAKR,EACLS,QAASV,EACTW,KAAMZ,EACNa,QAAST,EAEb,CAEA5f,eAAesgB,EAAsCniB,EAAWoG,GAC9D,MAAM5D,QAAe1C,EAAAA,EAAAA,IAAQ,eAAgB,CAC3CsiB,KAAMhc,IAGR,IAAK5D,EAAQ,OAEbxC,GAASoC,EAAAA,EAAAA,MAET,MAAMkE,GAAoBC,EAAAA,EAAAA,IAAgBvG,EAAQoG,EAAUtH,IAc5D,OAZAkB,GAASwG,EAAAA,EAAAA,IACPxG,EACAoG,EAAUtH,IACV2H,EAAAA,EAAAA,IAAKjE,EAAO4D,UAAW,CAAC,yBACxBxE,EACA0E,GAAmB+b,cAAWzgB,EAAYY,EAAO4D,UAAUM,mBAE7D1G,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAASsM,EAAAA,EAAAA,IAAStM,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,QAE7DuC,EAAAA,EAAAA,IAAU5F,GAEHwC,EAAO4D,SAChB,CAEAvE,eAAeygB,EACbtiB,EACAoG,EAAkCmc,GAElC,MAAM/f,QAAe1C,EAAAA,EAAAA,IAAQ,6BAA8B,CACzDsiB,KAAMhc,EACN6U,OAAQsH,IAGL/f,IAELxC,GAASoC,EAAAA,EAAAA,MAETpC,GAAS2E,EAAAA,EAAAA,IAAS3E,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOyB,MAAO,OAC7DjE,GAASsM,EAAAA,EAAAA,IAAStM,GAAQqE,EAAAA,EAAAA,IAAqB7B,EAAOa,MAAO,QAE7DuC,EAAAA,EAAAA,IAAU5F,GACZ,EAEAwJ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACxJ,EAAQ8F,EAAS4E,KACzD,MAAM,MAAE2D,EAAK,MAAE5N,GAAQC,EAAAA,EAAAA,OAAsBgK,GAAW,CAAC,EACzD,OAAOqB,EAAAA,EAAAA,GAAe/L,EAAQ,CAC5BwiB,mBAAoB,UAAY9X,GAAW,CAAC,GAAK2D,IAASpC,EAAAA,EAAAA,KAAejM,EAAQS,GAAO+hB,oBACvF/hB,EAAM,KAGX+I,EAAAA,EAAAA,IAAiB,+BAA+B3H,MAAO7B,EAAQ8F,EAAS4E,KACtE,MAAM,WAAE+X,EAAU,GAAE3jB,GAAO4L,EACrBtE,GAAYG,EAAAA,EAAAA,IAAgBvG,EAAQlB,GAErCsH,IAEDqc,UACIN,EAAeniB,EAAQoG,GAC7BpG,GAASoC,EAAAA,EAAAA,YACHkgB,EAA2BtiB,EAAQoG,UAGrCtG,EAAAA,EAAAA,IAAQ,mCAAoC,CAChD2iB,aACAL,KAAMhc,IACN,KAGJoD,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAO7B,EAAQ8F,EAAS4E,KAC1D,MAAM,OAAE9K,EAAM,MAAEa,GAAQC,EAAAA,EAAAA,OAAsBgK,EAExC3E,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAChC,IAAKmG,EACH,OAGF,MAAMvD,QAAe1C,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C+e,KAAM9Y,IAGHvD,IAELxC,GAASoC,EAAAA,EAAAA,MACTpC,GAASwG,EAAAA,EAAAA,IAAgBxG,EAAQwC,EAAO1D,GAAI,IACvC0D,EACH5C,YAEFgG,EAAAA,EAAAA,IAAU5F,GAEV8F,EAAQ4c,8BAA8B,CAAE5jB,GAAI0D,EAAO1D,GAAIE,WAAYwD,EAAOxD,WAAYyB,UAAQ,KAGhG+I,EAAAA,EAAAA,IAAiB,6BAA6B3H,MAAO7B,EAAQ8F,EAAS4E,KACpE,MAAM,MAAEjK,GAAQC,EAAAA,EAAAA,OAAsBgK,GAAW,CAAC,EAC5CtE,GAAYuc,EAAAA,EAAAA,IAAsB3iB,GAExC,IAAKoG,IAAcA,EAAUxG,OAC3B,OAGF,MAAMmG,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQoG,EAAUxG,QAC1C,IAAKmG,EACH,OAGF,MAAM6c,EAAoB3Y,SAAQ4Y,EAAAA,EAAAA,IAAgB9c,IAElD,IAAI+c,GAAa/J,EAAAA,EAAAA,KAAmB/Y,EAAQ+F,EAAKjH,KAAKgkB,WAClDF,IACFE,QAAmBhjB,EAAAA,EAAAA,IAAQ,wBAAyB,CAClDsiB,KAAMhc,EACN2c,eAAe,KAIdD,KAILE,EAAAA,EAAAA,IAAoBF,GACpBhd,EAAQgC,iBAAiB,CACvBvF,QAAS,2BACT9B,UACA,KAGJ+I,EAAAA,EAAAA,IAAiB,uBAAuB3H,MAAO7B,EAAQ8F,EAAS4E,KAC9D,MAAM,SAAEvD,EAAQ,WAAEuP,EAAU,MAAEjW,GAAQC,EAAAA,EAAAA,OAAsBgK,EAEtD3E,QAAamB,EAAAA,EAAAA,IAAoBlH,EAAQmH,GAE/C,IAAKpB,EAEH,YADAD,EAAQgC,iBAAiB,CAAEvF,QAASwF,EAAAA,GAAuB,mBAAoBtH,UAIjFT,GAASoC,EAAAA,EAAAA,MACT,MAAM6gB,QAAapd,EAAAA,EAAAA,IAAa7F,EAAQ8F,EAASC,EAAMtF,GAEnDwiB,GAAM7c,WACRN,EAAQ4c,8BAA8B,CACpC5jB,GAAImkB,EAAK7c,UAAUtH,GACnBE,WAAYikB,EAAK7c,UAAUpH,WAC3B0X,aACAjW,SAEJ,KAGF+I,EAAAA,EAAAA,IAAiB,iCAAiC,CAACxJ,EAAQ8F,EAAS4E,KAClE5E,EAAQod,2BAA2B,CACjC7G,OAAQ,gBACR3R,UACAjK,MAAOiK,EAAQjK,QAASC,EAAAA,EAAAA,OACxB,KAGJ8I,EAAAA,EAAAA,IAAiB,8BAA8B,CAACxJ,EAAQ8F,EAAS4E,KAC/D5E,EAAQod,2BAA2B,CACjC7G,OAAQ,aACR3R,aAAS9I,EACTnB,MAAOiK,GAASjK,QAASC,EAAAA,EAAAA,OACzB,KAGJ8I,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAO7B,EAAQ8F,EAAS4E,KACxD,MAAM,OACJ9K,EAAM,GAAEd,EAAE,WAAEE,EAAU,WAAE0X,EAAU,MAAEjW,GAAQC,EAAAA,EAAAA,OAC1CgK,EAEJ,IAAKyY,EAAAA,GAKH,YAJArd,EAAQgC,iBAAiB,CACvBvF,QAAS,kDACT9B,UAKJ,GAAIT,EAAOojB,UAET,YADAtd,EAAQud,qBAAqB,CAAE5iB,WA+JnC,WACE,MAAM6iB,EAXE,IAAK1O,OAAO2O,cAAiB3O,OAAe4O,oBAYpDvD,EAAe,IAAIe,MACnBd,EAAeoD,EACfrD,EAAawD,UAAYC,EAAQJ,IACjCK,EAAAA,EAAAA,GAAS1D,EACX,CAjKE2D,GAEAvD,IAEKwD,EADL7jB,GAASoC,EAAAA,EAAAA,MACuC0D,GAAS,EAAMrF,GAE/D,MAAQqjB,YAAY,kBAAEC,IAAwB/jB,EAC9C,IAAIoG,EAAYtH,GAAKyH,EAAAA,EAAAA,IAAgBvG,EAAQlB,IAAMklB,EAAAA,EAAAA,IAAoBhkB,EAAQJ,GAE/E,GAAIwG,GAAaA,EAAUtH,KAAOilB,EAChCje,EAAQud,qBAAqB,CAAE5iB,eAIjC,GAAIsjB,EACE,mBAAoBje,GACtBA,EAAQme,eAAe,CACrBC,OAAQxZ,EACRjK,eAMN,GAAI2F,GAAa2d,IAAsB3d,EAAUtH,GAC/CgH,EAAQud,qBAAqB,CAAE5iB,cADjC,CAKA,GAAK2F,GAAetH,GAAOE,IAAeY,GAQ9BwG,GAAatH,GAAME,IAC7BoH,QAAkB+b,EAAeniB,EAAQ,CACvClB,KACAE,oBAX8C,CAChD,MAAM+G,GAAO5C,EAAAA,EAAAA,KAAWnD,EAAQJ,GAEhC,IAAKmG,EAAM,aAELF,EAAAA,EAAAA,IAAa7F,EAAQ8F,EAASC,EAAMtF,GAC1CT,GAASoC,EAAAA,EAAAA,MACTgE,GAAY4d,EAAAA,EAAAA,IAAoBhkB,EAAQJ,EAC1C,CAOKwG,IAELpG,GAASoC,EAAAA,EAAAA,MACTpC,GAASwG,EAAAA,EAAAA,IACPxG,EACAoG,EAAUtH,GACV,IACKsH,EACHsQ,mBAEF9U,EACAwE,EAAUM,kBAAoB,GAEhC1G,EAAS,IACJA,EACH8jB,WAAY,IACP9jB,EAAO8jB,WACVC,kBAAmB3d,EAAUtH,MAIjC8G,EAAAA,EAAAA,IAAU5F,GAEV8F,EAAQud,qBAAqB,CAAEhV,OAAO,EAAO5N,UAxC7C,CAwCqD,KAGvD+I,EAAAA,EAAAA,IAAiB,sBAAsB,CAACxJ,EAAQ8F,EAAS4E,KACvD,MAAM,MAAE4V,GAAU5V,EAEbyV,EAAOG,KAKI,eAAVA,GACFH,EAAO0B,WAAWjY,QAEN,aAAV0W,GACFH,EAAO2B,SAASlY,QAEJ,YAAV0W,GACFH,EAAO+B,QAAQtY,SAEjB+Z,EAAAA,EAAAA,GAASxD,EAAOG,IAGV,KAGV9W,EAAAA,EAAAA,IAAiB,iCAAkCxJ,IACjD,MAAMoG,GAAYuc,EAAAA,EAAAA,IAAsB3iB,GACnCoG,GAIAkc,EAA2BtiB,EAAQoG,EAAWA,EAAUmc,WAAW,KAG1E/Y,EAAAA,EAAAA,IAAiB,+BAA+B,CAACxJ,EAAQ8F,EAAS4E,KAChE5E,EAAQod,2BAA2B,CACjC7G,OAAQ,cACR3R,UACAjK,MAAOiK,EAAQjK,QAASC,EAAAA,EAAAA,OACxB,KAGJ8I,EAAAA,EAAAA,IAAiB,eAAe,CAACxJ,EAAQ8F,EAAS4E,KAChD,MAAM,OAAEoF,EAAM,QAAEqU,EAAO,MAAE1jB,GAAQC,EAAAA,EAAAA,OAAsBgK,EAEnD1K,EAAOojB,UACTtd,EAAQud,qBAAqB,CAAE5iB,WAIpBkH,EAAAA,EAAAA,KAAW3H,EAAQ8P,KAMhCuQ,IAEKwD,EADL7jB,GAASoC,EAAAA,EAAAA,MACuC0D,EAASqe,EAAS1jB,GAElET,GAASoC,EAAAA,EAAAA,MACTpC,EAAS,IACJA,EACHojB,UAAW,CACTtkB,GAAI,GACJslB,MAAO,aACPC,cAAevU,EACfqU,UACAG,QAAStkB,EAAOgE,iBAGpB4B,EAAAA,EAAAA,IAAU5F,GAEV8F,EAAQud,qBAAqB,CAAEhV,OAAO,EAAO5N,UAAQ,IAOvD,MAAMijB,EAAWJ,IACf,MAAMiB,EAAajB,EAAIkB,mBACjBC,EAAMF,EAAWvC,QAAQsB,EAAIoB,gCAEnC,OADAH,EAAWpN,QACJ,IAAIwN,YAAY,CAAC1jB,OAAO2jB,OAAQH,EAAYI,OAAOC,iBAAiB,GAAI,CAAEC,SAAS,KAAU,EAW/F,SAASC,IACd,OAAO/E,CACT,CAEO,SAASgF,IACd,OAAO/E,CACT,CAEO,SAASgF,IACdjF,GAAcrW,QACdsW,OAAete,EACfqe,OAAere,CACjB,CAKO,SAASiiB,EACd7jB,EACA8F,EAAgCqe,GAEhC,QAAAhkB,EAAAC,UAAAC,OAAA0J,EAAA,IAAAxJ,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAuJ,EAAAvJ,EAAA,GAAAJ,UAAAI,GAAA,IADIC,GAAQC,EAAAA,EAAAA,OAAkBqJ,EAE1Boa,EACFgB,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC1C1E,MAAMiE,IACkC,IAAnCA,EAAOU,iBAAiBllB,OAC1ByF,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,qBAChCtH,WAGFokB,EAAOW,YAAYrgB,SAASsgB,GAAUA,EAAMC,SAC5CC,EAA0B3lB,EAAQ8F,EAASrF,GAC7C,IAEDmlB,OAAM,KACL9f,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,qBAChCtH,SACA,IAGNklB,EAA0B3lB,EAAQ8F,EAASrF,EAE/C,CAEA,SAASklB,EACP3lB,EAAW8F,GACX,QAAAE,EAAA5F,UAAAC,OAAAC,EAAA,IAAAC,MAAAyF,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA5F,EAAA4F,EAAA,GAAA9F,UAAA8F,GAAA,IAD+CzF,GAAQC,EAAAA,EAAAA,OAAkBJ,EAEzE6kB,UAAUC,aAAaC,aAAa,CAAEQ,OAAO,IAC1CjF,MAAMiE,IACkC,IAAnCA,EAAOC,iBAAiBzkB,OAC1ByF,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,yCAChCtH,UAGFokB,EAAOW,YAAYrgB,SAASsgB,GAAUA,EAAMC,QAC9C,IAEDE,OAAM,KACL9f,EAAQgC,iBAAiB,CACvBvF,QAASwF,EAAAA,GAAuB,yCAChCtH,SACA,GAER,C,8GChfO,SAAS+F,EACdxG,EACA8lB,EACAC,EACAC,EACAC,GAEA,MAKMC,EALajlB,OAAOC,OAAO,IAC5BlB,EAAO8jB,WAAW5f,KAAK4hB,IAAcI,gBACrCH,EAAgBG,eAEOlc,QAAOD,IAAA,IAAC,OAAEoc,GAAQpc,EAAA,OAAMoc,CAAM,IAC5B/kB,QAAO,CAACsb,EAA2CC,KAC/ED,EAAIC,EAAG7d,IAAM6d,EACND,IACN,CAAC,GAEJ,MAAO,IACF1c,EACH8jB,WAAY,IACP9jB,EAAO8jB,WACV5f,KAAM,IACDlE,EAAO8jB,WAAW5f,KACrB,CAAC4hB,GAAc,IACV9lB,EAAO8jB,WAAW5f,KAAK4hB,OACvBrf,EAAAA,EAAAA,IAAKsf,EAAiB,CAAC,yBACtBC,GAAyB,CAC3Btf,kBAAmB1G,EAAO8jB,WAAW5f,KAAK4hB,GAAapf,kBAAoBsf,WAE/CpkB,IAA1BqkB,GAAuC,CACzCvf,kBAAmBuf,GAErBC,kBAKV,CAEO,SAASE,EACdpmB,EACA8lB,GAEA,MAAM1f,GAAYG,EAAAA,EAAAA,IAAgBvG,EAAQ8lB,GAU1C,OATI1f,GAAaA,EAAUxG,SACZuD,EAAAA,EAAAA,KAAWnD,EAAQoG,EAAUxG,UAExCI,GAAS2Y,EAAAA,EAAAA,IAAmB3Y,EAAQoG,EAAUxG,OAAQ,CACpDkmB,iBAAalkB,KAKZ,IACF5B,EACH8jB,WAAY,IACP9jB,EAAO8jB,WACV5f,KAAM,KACDuC,EAAAA,EAAAA,IAAKzG,EAAO8jB,WAAW5f,KAAM,CAAC4hB,EAAYhR,eAIrD,CAEO,SAASuR,EACdrmB,EACA+lB,EACAE,GAEA,OAAKjmB,EAAO8jB,WAAWC,kBAIhBvd,EAAgBxG,EACrBA,EAAO8jB,WAAWC,kBAClBgC,OACAnkB,EACAqkB,GAPOjmB,CAQX,CAEO,SAASsmB,EACdtmB,EACA8lB,EACAhW,EACAyW,GAEG,IADHC,EAAapmB,UAAAC,OAAA,QAAAuB,IAAAxB,UAAA,IAAAA,UAAA,GAEb,MAAMgG,GAAYG,EAAAA,EAAAA,IAAgBvG,EAAQ8lB,GAC1C,OAAK1f,EAIEI,EAAgBxG,EAAQ8lB,EAAa,CAC1CI,aAAc,IACT9f,EAAU8f,aACb,CAACpW,GAAS,IACL1J,EAAU8f,aAAapW,MACvByW,KAGNA,EAAkBJ,OAChBK,EAAgB,GAAK,EACrBpgB,EAAU8f,aAAapW,IAAW0W,EAAgB,EAAI,GAblDxmB,CAcX,C","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  addUsersToRestrictedInviteList,\n  deleteTopic,\n  leaveChat,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: number) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: number | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: number;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(threadInfo.threadId)))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: loadingThreadId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: loadingThreadId,\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.translate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.translate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.creationDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let restrictedUserIds: string[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    restrictedUserIds = result?.restrictedUserIds;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, channelId, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChatId: string | undefined;\n  try {\n    const { chat: createdChat, restrictedUserIds } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n    createdChatId = chatId;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n    if (restrictedUserIds) {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, restrictedUserIds, chatId, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    } else if ((err as ApiError).message === 'USER_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, users.map(({ id }) => id), createdChatId!, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = toChannelId(chatOrChannelPostId);\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    if (messageId) {\n      focusMessage({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n    }\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const restrictedUserIds = await callApi('addChatMembers', chat, users);\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, chat.id, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (chatId === global.currentUserId) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","_len","arguments","length","_ref2","Array","_key","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","_ref3","_ref4","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","shift","includes","result2","user","notificationsChat","selectChat","unshift","chats","lastMessage","tabStates","visibleChats","flatMap","_ref9","currentChat","selectCurrentChat","visibleUsers","_ref10","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","isFullyLoaded","setGlobal","loadFullChat","actions","chat","_len2","_ref11","_key2","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len4","_ref13","_key4","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","_len6","_ref15","_key6","callAttachBot","startParam","ensureIsSuperGroup","_len7","_ref16","_key7","isChatBasicGroup","newChat","_len3","_ref12","_key3","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","payload","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","closeStoryViewer","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","isForum","threadInfo","selectThreadInfo","listedIds","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addChats","addMessages","messages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","TMP_CHAT_ID","onReplace","getOrderDate","date","creationDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","restrictedUserIds","chatCreation","progress","ChatCreationProgress","InProgress","channel","Error","channelId","Complete","addUsersToRestrictedInviteList","userId","leaveChat","createdChatId","createdChat","err","_ref5","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref6","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","Number","hasBoost","substr","startattach","shortName","text","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","isChatChannel","openBoostModal","webAppName","isWebApp","usernames","channelPostId","_len5","_ref14","_key5","isCurrentChat","openThread","startBot","botId","param","usernameChat","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","isChatSuperGroup","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","updateListedTopicIds","entries","_ref7","readInboxMessageIdByTopicId","_ref8","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}